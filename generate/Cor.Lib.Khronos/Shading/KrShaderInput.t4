    /// <summary>
    /// Represents an Open GL ES shader input, all the data is read dynamically from
    /// the shader at runtime, not from the ShaderInputDefinition.  This way we can compare the
    /// two and check to see that we have what we are expecting.
    /// </summary>
    public sealed class KrShaderInput
    {
        int ProgramHandle { get; set; }
        internal int AttributeLocation { get; private set; }

        public String Name { get; private set; }
        public Type Type { get; private set; }
        public VertexElementUsage Usage { get; private set; }
        public Object DefaultValue { get; private set; }
        public Boolean Optional { get; private set; }

        public KrShaderInput(
            int programHandle, KrShaderUtils.KrShaderAttribute attribute)
        {
            int attLocation = GL.GetAttribLocation(programHandle, attribute.Name);

            KrErrorHandler.Check();

            InternalUtils.Log.Info(string.Format(
                "    Binding Shader Input: [Prog={0}, AttIndex={1}, AttLocation={4}, AttName={2}, AttType={3}]",
                programHandle, attribute.Index, attribute.Name, attribute.Type, attLocation));

            this.ProgramHandle = programHandle;
            this.AttributeLocation = attLocation;
            this.Name = attribute.Name;
            this.Type = KrEnumConverter.ToType(attribute.Type);


        }

        internal void RegisterExtraInfo(ShaderInputDefinition definition)
        {
            Usage = definition.Usage;
            DefaultValue = definition.DefaultValue;
            Optional = definition.Optional;
        }
    }

