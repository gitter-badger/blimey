    /// <summary>
    /// Static class to help with horrible shader system.
    /// </summary>
    public static class KrShaderUtils
    {
        public class KrShaderUniform
        {
            public Int32 Index { get; set; }
            public String Name { get; set; }
            public ActiveUniformType Type { get; set; }
        }

        public class KrShaderAttribute
        {
            public Int32 Index { get; set; }
            public String Name { get; set; }
            public ActiveAttribType Type { get; set; }
        }

        public static Int32 CreateShaderProgram()
        {
            // Create shader program.
            Int32 programHandle = GL.CreateProgram ();

            if( programHandle == 0 )
                throw new Exception("Failed to create shader program");

            KrErrorHandler.Check();

            return programHandle;
        }

        public static Int32 CreateVertexShader(String source)
        {
            Int32 vertShaderHandle;

            KrShaderUtils.CompileShader (
                GLShaderType.VertexShader,
                source,
                out vertShaderHandle );

            if( vertShaderHandle == 0 )
                throw new Exception("Failed to compile vertex shader program");

            return vertShaderHandle;
        }

        public static Int32 CreateFragmentShader(String source)
        {
            Int32 fragShaderHandle;

            KrShaderUtils.CompileShader (
                GLShaderType.FragmentShader,
                source,
                out fragShaderHandle );

            if( fragShaderHandle == 0 )
                throw new Exception("Failed to compile fragment shader program");


            return fragShaderHandle;
        }

        public static void AttachShader(
            Int32 programHandle,
            Int32 shaderHandle)
        {
            if (shaderHandle != 0)
            {
                // Attach vertex shader to program.
                GL.AttachShader (programHandle, shaderHandle);
                KrErrorHandler.Check();
            }
        }

        public static void DetachShader(
            Int32 programHandle,
            Int32 shaderHandle )
        {
            if (shaderHandle != 0)
            {
                GL.DetachShader (programHandle, shaderHandle);
                KrErrorHandler.Check();
            }
        }

        public static void DeleteShader(
            Int32 programHandle,
            Int32 shaderHandle )
        {
            if (shaderHandle != 0)
            {
                GL.DeleteShader (shaderHandle);
                shaderHandle = 0;
                KrErrorHandler.Check();
            }
        }

        public static void DestroyShaderProgram (Int32 programHandle)
        {
            if (programHandle != 0)
            {
#if COR_PLATFORM_XIOS
                GL.DeleteProgram (programHandle);
#elif COR_PLATFORM_MONOMAC
                GL.DeleteProgram (1, new int[]{ programHandle } );
#endif

                programHandle = 0;
                KrErrorHandler.Check();
            }
        }

        // This should happen offline.
        public static void CompileShader (
            GLShaderType type,
            String src,
            out Int32 shaderHandle )
        {
            // Create an empty vertex shader object
            shaderHandle = GL.CreateShader (type);

            KrErrorHandler.Check();

            // Replace the source code in the vertex shader object
#if COR_PLATFORM_XIOS
            GL.ShaderSource (
                shaderHandle,
                1,
                new String[] { src },
                (Int32[]) null );
#elif COR_PLATFORM_MONOMAC
            GL.ShaderSource (
                shaderHandle,
                src);
#endif

            KrErrorHandler.Check();

            GL.CompileShader (shaderHandle);

            KrErrorHandler.Check();

#if DEBUG
            Int32 logLength = 0;
            GL.GetShader (
                shaderHandle,
                ShaderParameter.InfoLogLength,
                out logLength);

            KrErrorHandler.Check();
            var infoLog = new System.Text.StringBuilder(logLength);

            if (logLength > 0)
            {
                int temp = 0;
                GL.GetShaderInfoLog (
                    shaderHandle,
                    logLength,
                    out temp,
                    infoLog );

                string log = infoLog.ToString();

                InternalUtils.Log.Info(src);
                InternalUtils.Log.Info (log);
                InternalUtils.Log.Info(type.ToString());
            }
#endif
            Int32 status = 0;

            GL.GetShader (
                shaderHandle,
                ShaderParameter.CompileStatus,
                out status );

            KrErrorHandler.Check();

            if (status == 0)
            {
                GL.DeleteShader (shaderHandle);
                throw new Exception ("Failed to compile " + type.ToString());
            }
        }

        public static List<KrShaderUniform> GetUniforms (Int32 prog)
        {

            int numActiveUniforms = 0;

            var result = new List<KrShaderUniform>();

            GL.GetProgram(prog, ProgramParameter.ActiveUniforms, out numActiveUniforms);
            KrErrorHandler.Check();

            for(int i = 0; i < numActiveUniforms; ++i)
            {
                var sb = new System.Text.StringBuilder ();

                int buffSize = 0;
                int length = 0;
                int size = 0;
                ActiveUniformType type;

                GL.GetActiveUniform(
                    prog,
                    i,
                    64,
                    out length,
                    out size,
                    out type,
                    sb);
                KrErrorHandler.Check();

                result.Add(
                    new KrShaderUniform()
                    {
                    Index = i,
                    Name = sb.ToString(),
                    Type = type
                    }
                );
            }

            return result;
        }

        public static List<KrShaderAttribute> GetAttributes (Int32 prog)
        {
            int numActiveAttributes = 0;

            var result = new List<KrShaderAttribute>();

            // gets the number of active vertex attributes
            GL.GetProgram(prog, ProgramParameter.ActiveAttributes, out numActiveAttributes);
            KrErrorHandler.Check();

            for(int i = 0; i < numActiveAttributes; ++i)
            {
                var sb = new System.Text.StringBuilder ();

                int buffSize = 0;
                int length = 0;
                int size = 0;
                ActiveAttribType type;
                GL.GetActiveAttrib(
                    prog,
                    i,
                    64,
                    out length,
                    out size,
                    out type,
                    sb);
                KrErrorHandler.Check();

                result.Add(
                    new KrShaderAttribute()
                    {
                        Index = i,
                        Name = sb.ToString(),
                        Type = type
                    }
                );
            }

            return result;
        }


        public static bool LinkProgram (Int32 prog)
        {
            bool retVal = true;

            GL.LinkProgram (prog);

            KrErrorHandler.Check();

#if DEBUG
            Int32 logLength = 0;

            GL.GetProgram (
                prog,
                ProgramParameter.InfoLogLength,
                out logLength );

            KrErrorHandler.Check();

            if (logLength > 0)
            {
                retVal = false;

                /*
                var infoLog = new System.Text.StringBuilder ();

                GL.GetProgramInfoLog (
                    prog,
                    logLength,
                    out logLength,
                    infoLog );
                */
                var infoLog = string.Empty;
                GL.GetProgramInfoLog(prog, out infoLog);


                KrErrorHandler.Check();

                InternalUtils.Log.Info (string.Format("[Cor.Resources] Program link log:\n{0}", infoLog));
            }
#endif
            Int32 status = 0;

            GL.GetProgram (
                prog,
                ProgramParameter.LinkStatus,
                out status );

            KrErrorHandler.Check();

            if (status == 0)
            {
                throw new Exception(String.Format("Failed to link program: {0:x}", prog));
            }

            return retVal;

        }

        public static void ValidateProgram (Int32 programHandle)
        {
            GL.ValidateProgram (programHandle);

            KrErrorHandler.Check();

            Int32 logLength = 0;

            GL.GetProgram (
                programHandle,
                ProgramParameter.InfoLogLength,
                out logLength );

            KrErrorHandler.Check();

            if (logLength > 0)
            {
                var infoLog = new System.Text.StringBuilder ();

                GL.GetProgramInfoLog (
                    programHandle,
                    logLength,
                    out logLength, infoLog );

                KrErrorHandler.Check();

                InternalUtils.Log.Info (string.Format("[Cor.Resources] Program validate log:\n{0}", infoLog));
            }

            Int32 status = 0;

            GL.GetProgram (
                programHandle, ProgramParameter.LinkStatus,
                out status );

            KrErrorHandler.Check();

            if (status == 0)
            {
                throw new Exception (String.Format("Failed to validate program {0:x}", programHandle));
            }
        }
    }

