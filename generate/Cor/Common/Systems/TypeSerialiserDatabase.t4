    public class TypeSerialiserDatabase
    {
        readonly Dictionary<Type, TypeSerialiser> assetTypeSerialisers;

        public TypeSerialiserDatabase()
        {
            assetTypeSerialisers = new Dictionary<Type, TypeSerialiser> ();
        }

        public TypeSerialiser<T> GetTypeSerialiser<T>()
        {
            return GetTypeSerialiser(typeof (T)) as TypeSerialiser<T>;
        }

        public TypeSerialiser GetTypeSerialiser(Type type)
        {
            if (!assetTypeSerialisers.ContainsKey (type))
                assetTypeSerialisers [type] = Activator.CreateInstance (type) as TypeSerialiser;

            return assetTypeSerialisers [type];
        }

        public TypeSerialiser GetTypeSerialiserFromId (Int32 id)
        {
            throw new NotImplementedException ();
        }
    }

