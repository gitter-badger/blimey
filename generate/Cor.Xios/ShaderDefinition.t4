	/// <summary>
	/// Defines how to create Cor.Xios's implementation
	/// of IShader.
	/// </summary>
	public class ShaderDefinition
	{
		/// <summary>
		/// Defines a global name for this shader
		/// </summary>
		public string Name { get; set; }
		
		/// Defines which passes this shader is made from 
		/// (ex: a toon shader is made for a cel-shading pass 
		/// followed by an edge detection pass)
		/// </summary>
		public List<String> PassNames { get; set; }
		
		/// <summary>
		/// Lists all of the supported inputs into this shader and
		/// defines whether or not they are optional to an implementation.
		/// </summary>
		public List<ShaderInputDefinition> InputDefinitions { get; set; }
		
		/// <summary>
		/// Defines all of the variables supported by this shader.  Every
		/// variant must support all of the variables.
		/// </summary>
		public List<ShaderVariableDefinition> VariableDefinitions { get; set; }

		
		public List<ShaderSamplerDefinition> SamplerDefinitions { get; set; }
		
		/// <summary>
		/// Defines the variants.  Done for optimisation, instead of having one
		/// massive shader that supports all the the Inputs and attempts to
		/// process them accordindly, we load slight variants of effectively 
		/// the same shader, then we select the most optimal variant to run
		/// based upon the VertexDeclaration the calling code is about to draw.
		/// </summary>
		public List<ShaderVariantDefinition> VariantDefinitions { get; set; }
	}

