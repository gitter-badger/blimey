    public class Scene
    {
        float rtri; // Angle For The Triangle ( NEW )
        float rquad;    // Angle For The Quad     ( NEW )

        public Scene () : base()
        {
        }

        // Resize And Initialize The GL Window 
        //      - See also the method in the MyOpenGLView Constructor about the NSView.NSViewGlobalFrameDidChangeNotification
        public void ResizeGLScene (RectangleF bounds)
        {
            // Reset The Current Viewport
            global::MonoMac.OpenGL.GL.Viewport (0, 0, (int)bounds.Size.Width, (int)bounds.Size.Height);
            // Select The Projection Matrix
            global::MonoMac.OpenGL.GL.MatrixMode (global::MonoMac.OpenGL.MatrixMode.Projection);
            // Reset The Projection Matrix
            global::MonoMac.OpenGL.GL.LoadIdentity ();

            // Set perspective here - Calculate The Aspect Ratio Of The Window
            Perspective (45, bounds.Size.Width / bounds.Size.Height, 0.1, 100);

            // Select The Modelview Matrix
            global::MonoMac.OpenGL.GL.MatrixMode (global::MonoMac.OpenGL.MatrixMode.Modelview);
            // Reset The Modelview Matrix
            global::MonoMac.OpenGL.GL.LoadIdentity ();
        }

        // This creates a symmetric frustum.
        // It converts to 6 params (l, r, b, t, n, f) for glFrustum()
        // from given 4 params (fovy, aspect, near, far)
        public static void Perspective (double fovY, double aspectRatio, double front, double back)
        {
            const
            double DEG2RAD = Math.PI / 180 ; 

            // tangent of half fovY
            double tangent = Math.Tan (fovY / 2 * DEG2RAD);

            // half height of near plane
            double height = front * tangent;

            // half width of near plane
            double width = height * aspectRatio;

            // params: left, right, bottom, top, near, far
            global::MonoMac.OpenGL.GL.Frustum (-width, width, -height, height, front, back);
        }

        // This method renders our scene.
        // The main thing to note is that we've factored the drawing code out of the NSView subclass so that
        // the full-screen and non-fullscreen views share the same states for rendering 
        public bool DrawGLScene ()
        {
            // Clear The Screen And The Depth Buffer
            global::MonoMac.OpenGL.GL.Clear (global::MonoMac.OpenGL.ClearBufferMask.ColorBufferBit | global::MonoMac.OpenGL.ClearBufferMask.DepthBufferBit);
            // Reset The Current Modelview Matrix
            global::MonoMac.OpenGL.GL.LoadIdentity ();

            global::MonoMac.OpenGL.GL.Translate (-1.5f, 0.0f, -6.0f);
            // Move Left 1.5 Units And Into The Screen 6.0
            global::MonoMac.OpenGL.GL.Rotate (rtri, 0.0f, 1.0f, 0.0f);
            // Rotate The Triangle On The Y axis
            global::MonoMac.OpenGL.GL.Begin (global::MonoMac.OpenGL.BeginMode.Triangles);     // Start drawing the Pyramid

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 0.0f, 0.0f);           // Red
            global::MonoMac.OpenGL.GL.Vertex3 (0.0f, 1.0f, 0.0f);          // Top Of Triangle (Front)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 1.0f, 0.0f);           // Green
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, 1.0f);            // Left Of Triangle (Front)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 0.0f, 1.0f);           // Blue
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, 1.0f);         // Right Of Triangle (Front)

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 0.0f, 0.0f);           // Red
            global::MonoMac.OpenGL.GL.Vertex3 (0.0f, 1.0f, 0.0f);          // Top Of Triangle (Right)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 0.0f, 1.0f);           // Blue
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, 1.0f);         // Left Of Triangle (Right)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 1.0f, 0.0f);           // Green
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, -1.0f);            // Right Of Triangle (Right)

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 0.0f, 0.0f);           // Red
            global::MonoMac.OpenGL.GL.Vertex3 (0.0f, 1.0f, 0.0f);          // Top Of Triangle (Back)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 1.0f, 0.0f);           // Green
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, -1.0f);            // Left Of Triangle (Back)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 0.0f, 1.0f);           // Blue
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, -1.0f);           // Right Of Triangle (Back)         

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 0.0f, 0.0f);           // Red
            global::MonoMac.OpenGL.GL.Vertex3 (0.0f, 1.0f, 0.0f);          // Top Of Triangle (Left)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 0.0f, 1.0f);           // Blue
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, -1.0f);           // Left Of Triangle (Left)
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 1.0f, 0.0f);           // Green
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, 1.0f);            // Right Of Triangle (Left)

            global::MonoMac.OpenGL.GL.End ();                      // Finished Drawing The Pyramid

            // Reset The Current Modelview Matrix
            global::MonoMac.OpenGL.GL.LoadIdentity ();

            global::MonoMac.OpenGL.GL.Translate (1.5f, 0.0f, -7.0f);           // Move Right 1.5 Units And Into The Screen 7.0
            global::MonoMac.OpenGL.GL.Rotate (rquad, 1.0f, 0.0f, 0.0f);            // Rotate The Quad On The X axis ( NEW )   
            global::MonoMac.OpenGL.GL.Begin (global::MonoMac.OpenGL.BeginMode.Quads);             // Start Drawing Cube
            global::MonoMac.OpenGL.GL.Color3 (0.0f, 1.0f, 0.0f);           // Set The Color To Green
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, 1.0f, -1.0f);         // Top Right Of The Quad (Top)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, 1.0f, -1.0f);        // Top Left Of The Quad (Top)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, 1.0f, 1.0f);         // Bottom Left Of The Quad (Top)
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, 1.0f, 1.0f);          // Bottom Right Of The Quad (Top)                        

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 0.5f, 0.0f);           // Set The Color To Orange
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, 1.0f);         // Top Right Of The Quad (Bottom)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, 1.0f);        // Top Left Of The Quad (Bottom)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, -1.0f);       // Bottom Left Of The Quad (Bottom)
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, -1.0f);        // Bottom Right Of The Quad (Bottom)

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 0.0f, 0.0f);           // Set The Color To Red
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, 1.0f, 1.0f);          // Top Right Of The Quad (Front)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, 1.0f, 1.0f);         // Top Left Of The Quad (Front)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, 1.0f);            // Bottom Left Of The Quad (Front)
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, 1.0f);         // Bottom Right Of The Quad (Front) 

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 1.0f, 0.0f);           // Set The Color To Yellow
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, -1.0f);        // Bottom Left Of The Quad (Back)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, -1.0f);       // Bottom Right Of The Quad (Back)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, 1.0f, -1.0f);        // Top Right Of The Quad (Back)
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, 1.0f, -1.0f);     // Top Left Of The Quad (Back)

            global::MonoMac.OpenGL.GL.Color3 (0.0f, 0.0f, 1.0f);           // Set The Color To Blue
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, 1.0f, 1.0f);         // Top Right Of The Quad (Left)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, 1.0f, -1.0f);            // Top Left Of The Quad (Left)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, -1.0f);           // Bottom Left Of The Quad (Left)
            global::MonoMac.OpenGL.GL.Vertex3 (-1.0f, -1.0f, 1.0f);            // Bottom Right Of The Quad (Left)

            global::MonoMac.OpenGL.GL.Color3 (1.0f, 0.0f, 1.0f);           // Set The Color To Violet
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, 1.0f, -1.0f);         // Top Right Of The Quad (Right)
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, 1.0f, 1.0f);          // Top Left Of The Quad (Right)
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, 1.0f);         // Bottom Left Of The Quad (Right)
            global::MonoMac.OpenGL.GL.Vertex3 (1.0f, -1.0f, -1.0f);            // Bottom Right Of The Quad (Right)         

            global::MonoMac.OpenGL.GL.End ();              // Done Drawing the Cube

            rtri += 0.2f;               // Increase The Rotation Variable For The Triangle
            rquad -= 0.15f;             // Decrease The Rotation Variable For The Quad 
            return true;
        }

    }