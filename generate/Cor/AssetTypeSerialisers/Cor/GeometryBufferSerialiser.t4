    class GeometryBufferSerialiser
        : AssetTypeSerialiser<IGeometryBuffer>
    {
        AssetTypeSerialiser<VertexDeclaration> vertexDeclSerialiser;

        internal GeometryBufferSerialiser () {}

        protected internal override void Initialise(AssetTypeSerialiserManager manager)
        {
            vertexDeclSerialiser = manager.GetTypeSerialiser<VertexDeclaration>();
        }

        protected internal override IGeometryBuffer Read(AssetBinaryReader abr)
        {
            VertexDeclaration declaration = vertexDeclSerialiser.Read(abr);
            Int32 vertexCount = abr.ReadInt32();

            Byte[] vertData = abr.ReadBytes(vertexCount * declaration.VertexStride);
            
            Int32 indexCount = abr.ReadInt32();

            Byte[] indexData = abr.ReadBytes(vertexCount * sizeof(Int32));
            
            IGraphicsManager gfx = null;
            
            IGeometryBuffer buffer = gfx.CreateGeometryBuffer (
                declaration,
                vertexCount,
                indexCount );

            buffer.VertexBuffer.SetRawData (vertData, 0, vertexCount);

            buffer.IndexBuffer.SetRawData (indexData, 0, indexCount);
            
            return buffer;
        }

        protected internal override void Write(AssetBinaryWriter abw, IGeometryBuffer obj)
        {
            throw new NotImplementedException();
        }
    }

