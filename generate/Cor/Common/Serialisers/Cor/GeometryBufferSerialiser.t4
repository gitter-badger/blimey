    public class GeometryBufferSerialiser
        : TypeSerialiser<IGeometryBuffer>
    {
        TypeSerialiser<VertexDeclaration> vertexDeclSerialiser;

        public GeometryBufferSerialiser () {}

        public override void Initialise(TypeSerialiserDatabase manager)
        {
            vertexDeclSerialiser = manager.GetTypeSerialiser<VertexDeclaration>();
        }

        public override IGeometryBuffer Read(BinaryReader abr)
        {
            VertexDeclaration declaration = vertexDeclSerialiser.Read(abr);
            Int32 vertexCount = abr.ReadInt32();

            Byte[] vertData = abr.ReadBytes(vertexCount * declaration.VertexStride);

            Int32 indexCount = abr.ReadInt32();

            Byte[] indexData = abr.ReadBytes(vertexCount * sizeof(Int32));

            IGraphicsManager gfx = null;

            IGeometryBuffer buffer = gfx.CreateGeometryBuffer (
                declaration,
                vertexCount,
                indexCount );

            buffer.VertexBuffer.SetRawData (vertData, 0, vertexCount);

            buffer.IndexBuffer.SetRawData (indexData, 0, indexCount);

            return buffer;
        }

        public override void Write(BinaryWriter abw, IGeometryBuffer obj)
        {
            throw new NotImplementedException();/*
            declaration.Write (abw, obj.VertexDeclaration);

            abw.Write (obj.VertexCount);
            Byte[] rawVertData = obj.VertexBuffer.GetRawData (0, obj.VertexCount);
            abw.Write (rawVertData);

            abw.Write (obj.IndexCount);
            Byte[] rawIndexData = obj.IndexBuffer.GetRawData (0, obj.IndexCount);
            abw.Write (rawIndexData);*/

        }
    }

