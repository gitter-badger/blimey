    public class TypeSerialiserDatabase
    {
        // Target type to type serialiser implementation.
        readonly Dictionary<Type, TypeSerialiser> assetTypeSerialisers;

        public TypeSerialiserDatabase()
        {
            assetTypeSerialisers = new Dictionary<Type, TypeSerialiser> ();
        }

        public void RegisterTypeSerialiser<TTarget, TSerialiser> ()
        where TSerialiser : TypeSerialiser <TTarget>
        {
            if (assetTypeSerialisers.ContainsKey (typeof(TTarget)))
            {
                throw new Exception (
                    String.Format (
                        "This type seraliser database already " +
                        "has a seraliaser:{0} for target type:{1}.",
                        typeof (TSerialiser),
                        typeof (TTarget)
                        ));
            }

            assetTypeSerialisers [typeof (TTarget)]
                = Activator.CreateInstance (typeof (TSerialiser))
                    as TypeSerialiser;
        }

        public TypeSerialiser<TTarget> GetTypeSerialiser<TTarget>()
        {
            return GetTypeSerialiser(typeof (TTarget))
                as TypeSerialiser<TTarget>;
        }

        public TypeSerialiser GetTypeSerialiser(Type type)
        {
            if (!assetTypeSerialisers.ContainsKey (type))
                throw new Exception (
                    String.Format (
                        "A type serialiser for type:{0} has " +
                        "not been regisitered",
                        type));

            return assetTypeSerialisers [type];
        }

        public TypeSerialiser GetTypeSerialiserFromId (Int32 id)
        {
            throw new NotImplementedException ();
        }
    }

