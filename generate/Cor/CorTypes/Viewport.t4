    /*
    /// <summary>
    /// todo
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    public struct Viewport
    {
        int _x;
        int _y;
        int _width;
        int _height;
        float _minZ;
        float _maxZ;

        public int X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        public int Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        public int Width
        {
            get
            {
                return this._width;
            }
            set
            {
                this._width = value;
            }
        }
        public int Height
        {
            get
            {
                return this._height;
            }
            set
            {
                this._height = value;
            }
        }
        public float MinDepth
        {
            get
            {
                return this._minZ;
            }
            set
            {
                this._minZ = value;
            }
        }
        public float MaxDepth
        {
            get
            {
                return this._maxZ;
            }
            set
            {
                this._maxZ = value;
            }
        }
        public Viewport(int x, int y, int width, int height)
        {
            this._x = x;
            this._y = y;
            this._width = width;
            this._height = height;
            this._minZ = 0f;
            this._maxZ = 1f;
        }

        public Viewport(Rectangle bounds)
        {
            this._x = bounds.X;
            this._y = bounds.Y;
            this._width = bounds.Width;
            this._height = bounds.Height;
            this._minZ = 0f;
            this._maxZ = 1f;
        }

        public Rectangle Bounds
        {
            get
            {
                Rectangle rectangle;
                rectangle.X = this._x;
                rectangle.Y = this._y;
                rectangle.Width = this._width;
                rectangle.Height = this._height;
                return rectangle;
            }
            set
            {
                this._x = value.X;
                this._y = value.Y;
                this._width = value.Width;
                this._height = value.Height;
            }
        }
        public override string ToString()
        {
            return string.Format("{{X:{0} Y:{1} Width:{2} Height:{3} MinDepth:{4} MaxDepth:{5}}}", new object[] { this.X, this.Y, this.Width, this.Height, this.MinDepth, this.MaxDepth });
        }

        static bool WithinEpsilon(float a, float b)
        {
            float num = a - b;
            return ((-1.401298E-45f <= num) && (num <= float.Epsilon));
        }

        public Vector3 Project(Vector3 source, Matrix44 projection, Matrix44 view, Matrix44 world)
        {
            Matrix44 temp; Matrix44.Multiply(ref world, ref view, out temp);
            Matrix44 matrix; Matrix44.Multiply(ref temp, ref projection, out matrix);
            Vector3 vector; Vector3.Transform(ref source, ref matrix, out vector);
            float a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
            if (!WithinEpsilon(a, 1f))
            {
                vector = (Vector3) (vector / a);
            }
            vector.X = (((vector.X + 1f) * 0.5f) * this.Width) + this.X;
            vector.Y = (((-vector.Y + 1f) * 0.5f) * this.Height) + this.Y;
            vector.Z = (vector.Z * (this.MaxDepth - this.MinDepth)) + this.MinDepth;
            return vector;
        }

        public Vector3 Unproject(Vector3 source, Matrix44 projection, Matrix44 view, Matrix44 world)
        {
            Matrix44 temp1; Matrix44.Multiply(ref world, ref view, out temp1);
            Matrix44 temp2; Matrix44.Multiply(ref temp1, ref projection, out temp2);
            Matrix44 matrix; Matrix44.Invert(ref temp2, out matrix);
            source.X = (((source.X - this.X) / ((float) this.Width)) * 2f) - 1f;
            source.Y = -((((source.Y - this.Y) / ((float) this.Height)) * 2f) - 1f);
            source.Z = (source.Z - this.MinDepth) / (this.MaxDepth - this.MinDepth);
            Vector3 vector; Vector3.Transform(ref source, ref matrix, out vector);
            float a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
            if (!WithinEpsilon(a, 1f))
            {
                vector = (Vector3) (vector / a);
            }
            return vector;
        }

        public float AspectRatio
        {
            get
            {
                if ((this._height != 0) && (this._width != 0))
                {
                    return (((float) this._width) / ((float) this._height));
                }
                return 0f;
            }
        }
        public Rectangle TitleSafeArea
        {
            get
            {
                return GetTitleSafeArea(this._x, this._y, this._width, this._height);
            }
        }
        internal static Rectangle GetTitleSafeArea(int x, int y, int w, int h)
        {
            return new Rectangle(x, y, w, h);
        }
    }
 */   

