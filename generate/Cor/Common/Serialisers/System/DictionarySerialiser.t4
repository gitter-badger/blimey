    public class DictionarySerialiser<TKey, TValue>
        : Serialiser<Dictionary<TKey, TValue>>
    {
        Serialiser<TKey> keySerialiser;
        Serialiser<TValue> valueSerialiser;

        SerialiserDatabase manager;

        public DictionarySerialiser () {}

        public override void Initialise(SerialiserDatabase manager)
        {
            this.manager = manager;
            keySerialiser = manager.GetSerialiser<TKey>();
            valueSerialiser = manager.GetSerialiser<TValue>();
        }

        public override Dictionary<TKey, TValue> Read(BinaryReader abr)
        {
            throw new NotImplementedException ();
            /*
            UInt32 count = abr.ReadUInt32();

            var dictionary = new Dictionary<TKey, TValue>();

            Type keyType = typeof(TKey);
            Type valueType = typeof(TValue);

            for (UInt32 i = 0; i < count; ++i)
            {
                TKey key;
                TValue value;

                if (keyType.IsValueType)
                {
                    key = keySerialiser.Read(abr);
                }
                else
                {
                    // Get the id of the type reader for this element,
                    // as this element might not be of Type T, it might be
                    // polymorphic.
                    Int32 keySerialiserId = abr.Read7BitEncodedInt32 ();

                    if (keySerialiserId > 0)
                    {
                        // Locate the correct serialiser for this element.
                        Serialiser virtualElementSerialiser =
                            this.manager.GetSerialiserFromId (keySerialiserId);

                        //
                        Object item = virtualElementSerialiser.ReadObject (abr);

                        // add to array then move on
                        key = (TKey)item;
                    }
                    else
                    {
                        // the element is null
                        key = default(TKey);
                    }
                }

                if (valueType.IsValueType)
                {
                    value = valueSerialiser.Read(abr);
                }
                else
                {
                    // Get the id of the type reader for this element,
                    // as this element might not be of Type T, it might be
                    // polymorphic.
                    Int32 valueSerialiserId = abr.Read7BitEncodedInt32 ();

                    if (valueSerialiserId > 0)
                    {
                        // Locate the correct serialiser for this element.
                        Serialiser virtualElementSerialiser =
                            this.manager.GetSerialiserFromId (valueSerialiserId);

                        //
                        Object item = virtualElementSerialiser.ReadObject (abr);

                        // add to array then move on
                        value = (TValue)item;
                    }
                    else
                    {
                        // the element is null
                        value = default(TValue);
                    }
                }

                dictionary.Add(key, value);
            }

            return dictionary;
            */
        }

        public override void Write(BinaryWriter abw, Dictionary<TKey, TValue> obj)
        {
            throw new NotImplementedException();
        }
    }

