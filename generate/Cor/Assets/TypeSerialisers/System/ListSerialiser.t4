    // test reading lists containing different items from a chain of inheritance.
    class ListSerialiser<T>
        : AssetTypeSerialiser<List<T>>
    {
        AssetTypeSerialiser<T> elementSerialiser;

        AssetTypeSerialiserManager manager;

        internal ListSerialiser () {}

        protected internal override void Initialise (AssetTypeSerialiserManager manager)
        {
            this.manager = manager;
            elementSerialiser = manager.GetTypeSerialiser<T> ();
        }

        protected internal override List<T> Read(AssetBinaryReader abr)
        {
            UInt32 count = abr.ReadUInt32 ();

            var list = new List<T> ();

            Type objectType = typeof(T);
            
            if (objectType.IsValueType)
            {
                for (Int32 i = 0; i < count; ++i)
                {
                    // no inheritance for structs
                    T item = elementSerialiser.Read (abr);
                    list.Add(item);
                }
            }
            else
            {
                for (Int32 i = 0; i < count; ++i)
                {
                    // Get the id of the type reader for this element,
                    // as this element might not be of Type T, it might be
                    // polymorphic.
                    Int32 objectTypeSerialiserId = abr.Read7BitEncodedInt32();

                    if (objectTypeSerialiserId > 0)
                    {
                        // Locate the correct serialiser for this element.
                        AssetTypeSerialiser virtualElementSerialiser = 
                            this.manager.GetTypeSerialiserFromId(objectTypeSerialiserId);
                        
                        //
                        Object item = virtualElementSerialiser.BaseRead (abr);
                        
                        // add to list then move on
                        list.Add((T)item);
                    }
                    else
                    {
                        // the element is null
                        list.Add(default(T));
                    }
                }
            }

            return list;
        }

        protected internal override void Write(AssetBinaryWriter abw, List<T> obj)
        {
            throw new NotImplementedException();
        }
    }

