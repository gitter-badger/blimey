        // Test Operator: Equality //-----------------------------------------//

        /// <summary>
        /// Helper method for testing equality.
        /// </summary>
        void TestEquality (Vector2 a, Vector2 b, Boolean expected )
        {
            // This test asserts the following:
            //   (a == b) == expected
            //   (b == a) == expected
            //   (a != b) == !expected
            //   (b != a) == !expected

            Boolean result_1a = (a == b);
            Boolean result_1b = (a.Equals(b));
            Boolean result_1c = (a.Equals((Object)b));

            Boolean result_2a = (b == a);
            Boolean result_2b = (b.Equals(a));
            Boolean result_2c = (b.Equals((Object)a));

            Boolean result_3a = (a != b);
            Boolean result_4a = (b != a);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_1c, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
            Assert.That(result_2c, Is.EqualTo(expected));
            Assert.That(result_3a, Is.EqualTo(!expected));
            Assert.That(result_4a, Is.EqualTo(!expected));
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of TRUE when two equal
        /// Vector2 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_i ()
        {
            var a = new Vector2(44, -54);
            var b = new Vector2(44, -54);

            Boolean expected = true;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of FALSE when two unequal
        /// Vector2 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_ii ()
        {
            var a = new Vector2(44, 54);
            var b = new Vector2(44, -54);

            Boolean expected = false;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Tests to make sure that all the equality opperators and functions
        /// yield the expected result of TRUE when used on a number of randomly
        /// generated pairs of equal Vector2 objects.
        /// </summary>
        [Test]
        public void TestOperator_Equality_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector2();

                Vector2 b = a;

                this.TestEquality(a, b, true);
            }
        }


        // Test Operator: Addition //-----------------------------------------//

        /// <summary>
        /// Helper method for testing addition.
        /// </summary>
        void TestAddition (Vector2 a, Vector2 b, Vector2 expected )
        {
            // This test asserts the following:
            //   a + b == expected
            //   b + a == expected

            var result_1a = a + b;
            var result_2a = b + a;

            Vector2 result_1b; Vector2.Add(ref a, ref b, out result_1b);
            Vector2 result_2b; Vector2.Add(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the addition opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_i ()
        {
            var a = new Vector2(3, -6);
            var b = new Vector2(-6, 12);

            var expected = new Vector2(-3, 6);

            this.TestAddition(a, b, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving the zero vector, all the
        /// addition opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_ii ()
        {
            var a = new Vector2(-2313, 88);

            var expected = a;

            this.TestAddition(a, Vector2.Zero, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving two zero vectors, all the
        /// addition opperators and functions yield the correct result of zero.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iii ()
        {
            this.TestAddition(Vector2.Zero, Vector2.Zero, Vector2.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// addition opperators and functions yield the same results as a
        /// manual addition calculation.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector2();
                var b = GetNextRandomVector2();

                var expected = new Vector2(a.X + b.X, a.Y + b.Y);

                this.TestAddition(a, b, expected);
            }
        }

        // Test Operator: Subtraction //--------------------------------------//

        /// <summary>
        /// Helper method for testing subtraction.
        /// </summary>
        void TestSubtraction (Vector2 a, Vector2 b, Vector2 expected )
        {
            // This test asserts the following:
            //   a - b == expected
            //   b - a == -expected

            var result_1a = a - b;
            var result_2a = b - a;

            Vector2 result_1b; Vector2.Subtract(ref a, ref b, out result_1b);
            Vector2 result_2b; Vector2.Subtract(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(-expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(-expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the subtraction opperators
        /// and functions yield the correct result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_i ()
        {
            var a = new Vector2(12, -4);
            var b = new Vector2(15, 11);
            var expected = new Vector2(-3, -15);
            this.TestSubtraction(a, b, expected);

            var c = new Vector2(-423, 342);
            this.TestSubtraction(c, Vector2.Zero, c);
        }

        /// <summary>
        /// Assert that when subtracting the zero vector fromt the zero vector,
        /// all the subtraction opperators and functions yield the correct
        /// result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_ii ()
        {
            this.TestSubtraction(Vector2.Zero, Vector2.Zero, Vector2.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// subtraction opperators and functions yield the same results as a
        /// manual subtraction calculation.
        /// </summary>
        [Test]
        public void TestOperator_Subtraction_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector2();
                var b = GetNextRandomVector2();

                var expected = new Vector2(a.X - b.X, a.Y - b.Y);

                this.TestSubtraction(a, b, expected);
            }
        }

        // Test Operator: Negation //-----------------------------------------//

        /// <summary>
        /// Helper method for testing negation.
        /// </summary>
        void TestNegation (Vector2 a, Vector2 expected )
        {
            // This test asserts the following:
            //   -a == expected

            var result_1a = -a;

            Vector2 result_1b; Vector2.Negate(ref a, out result_1b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the negation opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_i ()
        {
            <#=T#> r = 3432;
            <#=T#> s = -6218;
            <#=T#> t = -3432;
            <#=T#> u = 6218;

            var a = new Vector2(r, s);
            var b = new Vector2(u, t);
            var c = new Vector2(t, u);
            var d = new Vector2(s, r);

            this.TestNegation(a, c);
            this.TestNegation(b, d);
        }

        /// <summary>
        /// Assert that, for known examples involving the zero vector, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_ii ()
        {
            <#=T#> t = -3432;
            <#=T#> u = 6218;
            <#=T#> r = 3432;
            <#=T#> s = -6218;

            var c = new Vector2(t, u);
            var d = new Vector2(s, r);

            this.TestNegation(c, Vector2.Zero - c);
            this.TestNegation(d, Vector2.Zero - d);
        }

        /// <summary>
        /// Assert that when negating the zero vector, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iii ()
        {
            this.TestNegation(Vector2.Zero, Vector2.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// negation opperators and functions yield the same results as a
        /// manual negation calculation.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector2();
                this.TestNegation(a, Vector2.Zero - a);
            }
        }

        // Test Operator: Multiplication //-----------------------------------//

        /// <summary>
        /// Helper method for testing multiplication.
        /// </summary>
        void TestMultiplication (Vector2 a, Vector2 b, Vector2 expected )
        {
            // This test asserts the following:
            //   a * b == expected
            //   b * a == expected

            var result_1a = a * b;
            var result_2a = b * a;

            Vector2 result_1b; Vector2.Multiply(ref a, ref b, out result_1b);
            Vector2 result_2b; Vector2.Multiply(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the multiplication opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_i ()
        {
            <#=T#> r = 18;
            <#=T#> s = -54;

            <#=T#> x = 3;
            <#=T#> y = 6;
            <#=T#> z = -9;

            var a = new Vector2(x, y);
            var b = new Vector2(y, z);
            var c = new Vector2(r, s);

            this.TestMultiplication(a, b, c);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// multiplication opperators and functions yield the same results as a
        /// manual multiplication calculation.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_ii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector2();
                var b = GetNextRandomVector2();

                var c = new Vector2(a.X * b.X, a.Y * b.Y);

                this.TestMultiplication(a, b, c);
            }
        }


        // Test Operator: Division //-----------------------------------------//

        /// <summary>
        /// Helper method for testing division.
        /// </summary>
        void TestDivision (Vector2 a, Vector2 b, Vector2 expected )
        {
            // This test asserts the following:
            //   a / b == expected

            var result_1a = a / b;

            Vector2 result_1b; Vector2.Divide(ref a, ref b, out result_1b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example using whole numbers, all the
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_i ()
        {
            <#=T#> r = 10;
            <#=T#> s = -40;

            <#=T#> x = 2000;
            <#=T#> y = 200;
            <#=T#> z = -5;

            var a = new Vector2(x, y);
            var b = new Vector2(y, z);
            var c = new Vector2(r, s);

            this.TestDivision(a, b, c);
        }

        /// <summary>
        /// Assert that, for a known example using fractional numbers, all the
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_ii ()
        {
            <#=T#> t = ((<#=T#>) 1 ) / ((<#=T#>) 10);
            <#=T#> u = ((<#=T#>) (-1) ) / ((<#=T#>) 40 );
            <#=T#> x = 2000;
            <#=T#> y = 200;
            <#=T#> z = -5;

            var a = new Vector2(y, z);
            var b = new Vector2(x, y);
            var c = new Vector2(t, u);

            this.TestDivision(a, b, c);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// division opperators and functions yield the same results as a
        /// manual addition division.
        /// </summary>
        [Test]
        public void TestOperator_Division_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector2();
                var b = GetNextRandomVector2();

                var c = new Vector2(a.X / b.X, a.Y / b.Y);

                this.TestDivision(a, b, c);
            }
        }

