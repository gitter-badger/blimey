        // Test Operator: Equality //-----------------------------------------//

        /// <summary>
        /// Helper method for testing equality.
        /// </summary>
        void TestEquality (Matrix44 a, Matrix44 b, Boolean expected )
        {
            // This test asserts the following:
            //   (a == b) == expected
            //   (b == a) == expected
            //   (a != b) == !expected
            //   (b != a) == !expected

            Boolean result_1a = (a == b);
            Boolean result_1b = (a.Equals(b));
            Boolean result_1c = (a.Equals((Object)b));

            Boolean result_2a = (b == a);
            Boolean result_2b = (b.Equals(a));
            Boolean result_2c = (b.Equals((Object)a));

            Boolean result_3a = (a != b);
            Boolean result_4a = (b != a);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_1c, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
            Assert.That(result_2c, Is.EqualTo(expected));
            Assert.That(result_3a, Is.EqualTo(!expected));
            Assert.That(result_4a, Is.EqualTo(!expected));
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of TRUE when two equal
        /// Matrix44 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_i ()
        {
            var a = new Matrix44(44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            var b = new Matrix44(44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);

            Boolean expected = true;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of FALSE when two unequal
        /// Matrix44 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_ii ()
        {
            var a = new Matrix44(44, 54, 2, 11, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            var b = new Matrix44(44, -54, 2, -1, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);

            Boolean expected = false;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Tests to make sure that all the equality opperators and functions
        /// yield the expected result of TRUE when used on a number of randomly
        /// generated pairs of equal Matrix44 objects.
        /// </summary>
        [Test]
        public void TestOperator_Equality_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();

                Matrix44 b = a;

                this.TestEquality(a, b, true);
            }
        }


        // Test Operator: Addition //-----------------------------------------//

        /// <summary>
        /// Helper method for testing addition.
        /// </summary>
        void TestAddition (Matrix44 a, Matrix44 b, Matrix44 expected )
        {
            // This test asserts the following:
            //   a + b == expected
            //   b + a == expected

            var result_1a = a + b;
            var result_2a = b + a;

            Matrix44 result_1b; Matrix44.Add(ref a, ref b, out result_1b);
            Matrix44 result_2b; Matrix44.Add(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the addition opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_i ()
        {
            var a = new Matrix44(
                  3, - 6,  44,  11,
                 44, -34, -22,  11,
                 36, -34, -22,  34,
                 44, -34, - 3,  12);

            var b = new Matrix44(
                - 6,  12,  18, - 3,
                 44, -34, -22,  11,
                 44, -54, -34,  11,
                 34, -54, -22,  11);

            var expected = new Matrix44(
                - 3,   6,  62,  8,
                 88, -68, -44, 22,
                 80, -88, -56, 45,
                 78, -88, -25, 23);

            this.TestAddition(a, b, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving the identity matrix, all the
        /// addition opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_ii ()
        {
            var a = new Matrix44(
                  3, - 6,  44,  11,
                 44, -34, -22,  11,
                 36, -34, -22,  34,
                 44, -34, - 3,  12);

            var expected = a;
            expected.R0C0++;
            expected.R1C1++;
            expected.R2C2++;
            expected.R3C3++;

            this.TestAddition(a, Matrix44.Identity, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving two identity matricies,
        /// all the addition opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iii ()
        {
            var i = Matrix44.Identity;

            var expected = new Matrix44(
                2, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 2, 0,
                0, 0, 0, 2);

            this.TestAddition(i, i, expected);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// addition opperators and functions yield the same results as a
        /// manual addition calculation.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                var b = GetNextRandomMatrix44();

                var expected = new Matrix44(
                    a.R0C0 + b.R0C0,
                    a.R0C1 + b.R0C1,
                    a.R0C2 + b.R0C2,
                    a.R0C3 + b.R0C3,
                    a.R1C0 + b.R1C0,
                    a.R1C1 + b.R1C1,
                    a.R1C2 + b.R1C2,
                    a.R1C3 + b.R1C3,
                    a.R2C0 + b.R2C0,
                    a.R2C1 + b.R2C1,
                    a.R2C2 + b.R2C2,
                    a.R2C3 + b.R2C3,
                    a.R3C0 + b.R3C0,
                    a.R3C1 + b.R3C1,
                    a.R3C2 + b.R3C2,
                    a.R3C3 + b.R3C3
                    );

                this.TestAddition(a, b, expected);
            }
        }

        // Test Operator: Subtraction //--------------------------------------//

        /// <summary>
        /// Helper method for testing subtraction.
        /// </summary>
        void TestSubtraction (Matrix44 a, Matrix44 b, Matrix44 expected )
        {
            // This test asserts the following:
            //   a - b == expected
            //   b - a == -expected

            var result_1a = a - b;
            var result_2a = b - a;

            Matrix44 result_1b; Matrix44.Subtract(ref a, ref b, out result_1b);
            Matrix44 result_2b; Matrix44.Subtract(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(-expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(-expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the subtraction opperators
        /// and functions yield the correct result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_i ()
        {
            var a = new Matrix44(
                12, -4, 14, 18,
                44, -6, -2, -11,
                34, 54, 4, 5,
                4, -6, 2, 2);

            var b = new Matrix44(
                15, 11, 7, 27,
                4, 1, -4, 11,
                3, 21, -22, 19,
                6, -5, 23, 11);

            var expected = new Matrix44(
                -3, -15, 7, -9,
                40, -7, 2, -22,
                31, 33, 26, -14,
                -2, -1, -21, -9);

            this.TestSubtraction(a, b, expected);

            var c = new Matrix44(
                -423, 342, 7, -800,
                44, -54, -22, 11,
                44, -54, -22, 11,
                44, -54, -22, 11);

            this.TestSubtraction(c, Matrix44.Zero, c);
        }

        /// <summary>
        /// Assert that when subtracting the zero matrix fromt the zero matrix,
        /// all the subtraction opperators and functions yield the correct
        /// result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_ii ()
        {
            this.TestSubtraction(
                Matrix44.Identity, Matrix44.Zero, Matrix44.Identity);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// subtraction opperators and functions yield the same results as a
        /// manual subtraction calculation.
        /// </summary>
        [Test]
        public void TestOperator_Subtraction_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                var b = GetNextRandomMatrix44();

                var expected = new Matrix44(
                    a.R0C0 - b.R0C0,
                    a.R0C1 - b.R0C1,
                    a.R0C2 - b.R0C2,
                    a.R0C3 - b.R0C3,
                    a.R1C0 - b.R1C0,
                    a.R1C1 - b.R1C1,
                    a.R1C2 - b.R1C2,
                    a.R1C3 - b.R1C3,
                    a.R2C0 - b.R2C0,
                    a.R2C1 - b.R2C1,
                    a.R2C2 - b.R2C2,
                    a.R2C3 - b.R2C3,
                    a.R3C0 - b.R3C0,
                    a.R3C1 - b.R3C1,
                    a.R3C2 - b.R3C2,
                    a.R3C3 - b.R3C3
                    );

                this.TestSubtraction(a, b, expected);
            }
        }

        // Test Operator: Negation //-----------------------------------------//

        /// <summary>
        /// Helper method for testing negation.
        /// </summary>
        void TestNegation (Matrix44 a, Matrix44 expected )
        {
            // This test asserts the following:
            //   -a == expected

            var result_1a = -a;

            Matrix44 result_1b;
            Matrix44.Negate(ref a, out result_1b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the negation opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_i ()
        {
            <#=T#> r = 3432;
            <#=T#> s = -6218;
            <#=T#> t = -3432;
            <#=T#> u = 6218;

            var a = new Matrix44(
                r, s, t, u,
                r, s, t, u,
                r, s, t, u,
                r, s, t, u);

            var b = new Matrix44(
                u, t, s, r,
                u, t, s, r,
                u, t, s, r,
                u, t, s, r);

            var c = new Matrix44(
                t, u, r, s,
                t, u, r, s,
                t, u, r, s,
                t, u, r, s);

            var d = new Matrix44(
                s, r, u, t,
                s, r, u, t,
                s, r, u, t,
                s, r, u, t);

            this.TestNegation(a, c);
            this.TestNegation(b, d);
        }

        /// <summary>
        /// Assert that, for known examples involving the zero matrix, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_ii ()
        {
            <#=T#> t = -3432;
            <#=T#> u = 6218;
            <#=T#> r = 3432;
            <#=T#> s = -6218;

            var c = new Matrix44(
                t, u, r, s,
                r, s, t, u,
                r, s, t, u,
                r, s, t, u);

            var d = new Matrix44(
                s, r, u, t,
                r, s, t, u,
                r, s, t, u,
                r, s, t, u);

            this.TestNegation(c, Matrix44.Zero - c);
            this.TestNegation(d, Matrix44.Zero - d);
        }

        /// <summary>
        /// Assert that when negating the zero matrix, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iii ()
        {
            this.TestNegation(Matrix44.Zero, Matrix44.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// negation opperators and functions yield the same results as a
        /// manual negation calculation.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                this.TestNegation(a, Matrix44.Zero - a);
            }
        }

        // Test Operator: Multiplication //-----------------------------------//

        /// <summary>
        /// Helper method for testing multiplication.
        /// </summary>
        void TestMultiplication (Matrix44 a, Matrix44 b, Matrix44 expected )
        {
            // This test asserts the following:
            //   a * b == expected

            Matrix44 result_1b; Matrix44.Multiply(ref a, ref b, out result_1b);
            Assert.That(result_1b, Is.EqualTo(expected));

#if (VARIANTS_ENABLED)
            var result_1a = a * b;
            Assert.That(result_1a, Is.EqualTo(expected));
#endif
        }

        /// <summary>
        /// Assert that, for a known example, all the multiplication opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_i ()
        {
            var a = new Matrix44();
            a.R0C0 = -27;
            a.R0C1 = 36;
            a.R0C2 = 9;
            a.R0C3 = -54;

            a.R1C0 = 36;
            a.R1C1 = 3;
            a.R1C2 = 9;
            a.R1C3 = 9;

            a.R2C0 = 9;
            a.R2C1 = 9;
            a.R2C2 = -36;
            a.R2C3 = 6;

            a.R3C0 = -24;
            a.R3C1 = 9;
            a.R3C2 = 36;
            a.R3C3 = -12;

            var b = new Matrix44();
            b.R0C0 = 3402;
            b.R0C1 = -1269;
            b.R0C2 = -2187;
            b.R0C3 = 2484;

            b.R1C0 = -999;
            b.R1C1 = 1467;
            b.R1C2 = 351;
            b.R1C3 = -1971;

            b.R2C0 = -387;
            b.R2C1 = 81;
            b.R2C2 = 1674;
            b.R2C3 = -693;

            b.R3C0 = 1584;
            b.R3C1 = -621;
            b.R3C2 = -1863;
            b.R3C3 = 1737;

            this.TestMultiplication(a, a, b);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// multiplication opperators and functions yield the same results as a
        /// manual multiplication calculation.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_ii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                var b = GetNextRandomMatrix44();

                var c = new Matrix44(
                    (a.R0C0 * b.R0C0) + (a.R0C1 * b.R1C0) +
                    (a.R0C2 * b.R2C0) + (a.R0C3 * b.R3C0),
                    (a.R0C0 * b.R0C1) + (a.R0C1 * b.R1C1) +
                    (a.R0C2 * b.R2C1) + (a.R0C3 * b.R3C1),
                    (a.R0C0 * b.R0C2) + (a.R0C1 * b.R1C2) +
                    (a.R0C2 * b.R2C2) + (a.R0C3 * b.R3C2),
                    (a.R0C0 * b.R0C3) + (a.R0C1 * b.R1C3) +
                    (a.R0C2 * b.R2C3) + (a.R0C3 * b.R3C3),
                    (a.R1C0 * b.R0C0) + (a.R1C1 * b.R1C0) +
                    (a.R1C2 * b.R2C0) + (a.R1C3 * b.R3C0),
                    (a.R1C0 * b.R0C1) + (a.R1C1 * b.R1C1) +
                    (a.R1C2 * b.R2C1) + (a.R1C3 * b.R3C1),
                    (a.R1C0 * b.R0C2) + (a.R1C1 * b.R1C2) +
                    (a.R1C2 * b.R2C2) + (a.R1C3 * b.R3C2),
                    (a.R1C0 * b.R0C3) + (a.R1C1 * b.R1C3) +
                    (a.R1C2 * b.R2C3) + (a.R1C3 * b.R3C3),
                    (a.R2C0 * b.R0C0) + (a.R2C1 * b.R1C0) +
                    (a.R2C2 * b.R2C0) + (a.R2C3 * b.R3C0),
                    (a.R2C0 * b.R0C1) + (a.R2C1 * b.R1C1) +
                    (a.R2C2 * b.R2C1) + (a.R2C3 * b.R3C1),
                    (a.R2C0 * b.R0C2) + (a.R2C1 * b.R1C2) +
                    (a.R2C2 * b.R2C2) + (a.R2C3 * b.R3C2),
                    (a.R2C0 * b.R0C3) + (a.R2C1 * b.R1C3) +
                    (a.R2C2 * b.R2C3) + (a.R2C3 * b.R3C3),
                    (a.R3C0 * b.R0C0) + (a.R3C1 * b.R1C0) +
                    (a.R3C2 * b.R2C0) + (a.R3C3 * b.R3C0),
                    (a.R3C0 * b.R0C1) + (a.R3C1 * b.R1C1) +
                    (a.R3C2 * b.R2C1) + (a.R3C3 * b.R3C1),
                    (a.R3C0 * b.R0C2) + (a.R3C1 * b.R1C2) +
                    (a.R3C2 * b.R2C2) + (a.R3C3 * b.R3C2),
                    (a.R3C0 * b.R0C3) + (a.R3C1 * b.R1C3) +
                    (a.R3C2 * b.R2C3) + (a.R3C3 * b.R3C3));

                this.TestMultiplication(a, b, c);
            }
        }

