    public sealed class ResourceManager
        : IOldResourceManager
    {
        Dictionary<ShaderType, IShader> shaderCache;

        public ResourceManager()
        {
            shaderCache = new Dictionary<ShaderType, IShader>();

            shaderCache[ShaderType.Unlit] = CorShaders.CreateUnlit();
            shaderCache[ShaderType.VertexLit] = CorShaders.CreatePhongVertexLit();
            shaderCache[ShaderType.PixelLit] = CorShaders.CreatePhongPixelLit();
        }

        public T Load<T>(string path) where T : IOldResource
        {
            if(!File.Exists(path))
            {
                throw new FileNotFoundException(path);
            }

            if(typeof(T) == typeof(Texture2D))
            {
                var tex = OglesTexture.CreateFromFile(path);

                return (T)(IOldResource) tex;
            }

            throw new NotImplementedException();
        }

        public T Open<T>(string path) where T : IDisposable
        {
            if(typeof(T) == typeof(StreamReader))
            {
                return (T)(IDisposable) new StreamReader(path);
            }

            throw new NotImplementedException();
        }

        public IShader LoadShader(ShaderType shaderType)
        {
            if( !shaderCache.ContainsKey(shaderType) )
            {
                throw new NotImplementedException();
            }

            return shaderCache[shaderType];
        }
    }

