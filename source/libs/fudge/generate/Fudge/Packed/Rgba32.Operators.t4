        /// <summary>
        /// todo
        /// </summary>
        public static Rgba32 operator *(Rgba32 value, Single scale)
        {
            UInt32 num;
            Rgba32 color;
            UInt32 packedValue = value.packedValue;
            UInt32 num5 = (byte)packedValue;
            UInt32 num4 = (byte)(packedValue >> 8);
            UInt32 num3 = (byte)(packedValue >> 0x10);
            UInt32 num2 = (byte)(packedValue >> 0x18);
            scale *= 65536f;
            if (scale < 0f)
            {
                num = 0;
            }
            else if (scale > 1.677722E+07f)
            {
                num = 0xffffff;
            }
            else
            {
                num = (UInt32)scale;
            }
            num5 = (num5 * num) >> 0x10;
            num4 = (num4 * num) >> 0x10;
            num3 = (num3 * num) >> 0x10;
            num2 = (num2 * num) >> 0x10;
            if (num5 > 0xff)
            {
                num5 = 0xff;
            }
            if (num4 > 0xff)
            {
                num4 = 0xff;
            }
            if (num3 > 0xff)
            {
                num3 = 0xff;
            }
            if (num2 > 0xff)
            {
                num2 = 0xff;
            }
            color.packedValue = ((num5 | (num4 << 8)) | (num3 << 0x10)) | (num2 << 0x18);
            return color;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void Multiply(ref Rgba32 value, ref Single scale, out Rgba32 colour )
        {
            UInt32 num;
            UInt32 packedValue = value.packedValue;
            UInt32 num5 = (byte)packedValue;
            UInt32 num4 = (byte)(packedValue >> 8);
            UInt32 num3 = (byte)(packedValue >> 0x10);
            UInt32 num2 = (byte)(packedValue >> 0x18);
            scale *= 65536f;
            if (scale < 0f)
            {
                num = 0;
            }
            else if (scale > 1.677722E+07f)
            {
                num = 0xffffff;
            }
            else
            {
                num = (UInt32)scale;
            }
            num5 = (num5 * num) >> 0x10;
            num4 = (num4 * num) >> 0x10;
            num3 = (num3 * num) >> 0x10;
            num2 = (num2 * num) >> 0x10;
            if (num5 > 0xff)
            {
                num5 = 0xff;
            }
            if (num4 > 0xff)
            {
                num4 = 0xff;
            }
            if (num3 > 0xff)
            {
                num3 = 0xff;
            }
            if (num2 > 0xff)
            {
                num2 = 0xff;
            }
            colour.packedValue = ((num5 | (num4 << 8)) | (num3 << 0x10)) | (num2 << 0x18);
        }

