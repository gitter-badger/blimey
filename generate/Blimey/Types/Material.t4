    public class Material
    {
        IShader shader;
        string renderPass;

        public BlendMode BlendMode { get; set; }
        public string RenderPass { get { return renderPass; } }

        public Material(string renderPass, IShader shader)
        {
            this.BlendMode = BlendMode.Default;

            this.renderPass = renderPass;
            this.shader = shader;
        }

        internal void UpdateShaderVariables(Matrix44 world, Matrix44 view, Matrix44 proj)
        {
            if(shader == null)
                return;

            // Right now we need to make sure that the shader variables are all set with this
            // settings this material has defined.

            // We don't know if the shader being used is exclusive to this material, or if it
            // is shared between many.

            // Therefore to be 100% sure we could reset every variable on the shader to the defaults,
            // then set the ones that this material knows about, thus avoiding running with shader settings
            // that this material doesn't know about that are being changed by something else that
            // shares the shader.  This would be bad, as it will likely involve setting the same variable multiple times

            // So instead, as an optimisation, iterate over all settings that this material knows about,
            // and ask the shader to change them, this compare those changes against a full list of
            // all of the shader's variables, if any were missed by the material, then set them to
            // their default values.

            // Right now, just use the easy option and optimise later ;-D

            shader.ResetVariables();

            shader.SetVariable ("World", world);
            shader.SetVariable ("View", view);
            shader.SetVariable ("Projection", proj);

            foreach(var propertyName in colourSettings.Keys)
            {
                shader.SetVariable (propertyName, colourSettings[propertyName]);
            }

            foreach(var propertyName in floatSettings.Keys)
            {
                shader.SetVariable (propertyName, floatSettings[propertyName]);
            }

            foreach(var propertyName in matrixSettings.Keys)
            {
                shader.SetVariable (propertyName, matrixSettings[propertyName]);
            }

            foreach(var propertyName in vector3Settings.Keys)
            {
                shader.SetVariable (propertyName, vector3Settings[propertyName]);
            }

            foreach(var propertyName in vector4Settings.Keys)
            {
                shader.SetVariable (propertyName, vector4Settings[propertyName]);
            }

            foreach(var propertyName in scaleSettings.Keys)
            {
                shader.SetVariable (propertyName, scaleSettings[propertyName]);
            }

            foreach(var propertyName in textureOffsetSettings.Keys)
            {
                shader.SetVariable (propertyName, textureOffsetSettings[propertyName]);
            }

            shader.ResetSamplerTargets();

            int i = 0;
            foreach(var key in textureSamplerSettings.Keys)
            {
                shader.SetSamplerTarget (key, i);
                i++;
            }
        }

        internal IShader GetShader()
        {
            return shader;
        }

        public Vector2 Tiling { get; set; }
        public Vector2 Offset { get; set; }

        internal void UpdateGpuSettings(IGraphicsManager graphics)
        {
            // Update the render states on the gpu
            BlendMode.Apply (this.BlendMode, graphics);

            graphics.SetActiveTexture (0, null);

            // Set the active textures on the gpu
            int i = 0;
            foreach(var key in textureSamplerSettings.Keys)
            {
                graphics.SetActiveTexture (i, textureSamplerSettings[key]);
                i++;
            }
        }

        Dictionary<string, Rgba32> colourSettings = new Dictionary<string, Rgba32>();
        Dictionary<string, Single> floatSettings = new Dictionary<string, Single>();
        Dictionary<string, Matrix44> matrixSettings = new Dictionary<string, Matrix44>();
        Dictionary<string, Vector3> vector3Settings = new Dictionary<string, Vector3>();
        Dictionary<string, Vector4> vector4Settings = new Dictionary<string, Vector4>();
        Dictionary<string, Vector2> scaleSettings = new Dictionary<string, Vector2>();
        Dictionary<string, Vector2> textureOffsetSettings = new Dictionary<string, Vector2>();
        Dictionary<string, ITexture> textureSamplerSettings = new Dictionary<string, ITexture>();

        public void SetColour(string propertyName, Rgba32 colour)
        {
            colourSettings[propertyName] = colour;
        }

        public void SetFloat(string propertyName, Single value)
        {
            floatSettings[propertyName] = value;
        }

        public void SetMatrix(string propertyName, Matrix44 matrix)
        {
            matrixSettings[propertyName] = matrix;
        }

        public void SetVector4(string propertyName, Vector4 vector)
        {
            vector4Settings[propertyName] = vector;
        }

        public void SetVector3(string propertyName, Vector3 vector)
        {
            vector3Settings[propertyName] = vector;
        }

        public void SetTextureOffset(string propertyName, Vector2 offset)
        {
            textureOffsetSettings[propertyName] = offset;
        }

        public void SetTextureScale(string propertyName, Vector2 scale)
        {
            scaleSettings[propertyName] = scale;
        }


        public void SetTexture(string propertyName, ITexture texture)
        {
            textureSamplerSettings[propertyName] = texture;
        }
    }

