    class ArraySerialiser<T>
        : AssetTypeSerialiser<T[]>
    {
        AssetTypeSerialiser<T> elementSerialiser;

        AssetTypeSerialiserManager manager;

        internal ArraySerialiser () {}

        protected internal override void Initialise(AssetTypeSerialiserManager manager)
        {
            this.manager = manager;
            elementSerialiser = manager.GetTypeSerialiser<T>();
        }

        protected internal override T[] Read (AssetBinaryReader abr)
        {
            UInt32 count = abr.ReadUInt32 ();

            var array = new T[count];
            
            Type objectType = typeof(T);
            
            if (objectType.IsValueType)
            {
                for (UInt32 i = 0; i < count; ++i)
                {
                    array [i] = elementSerialiser.Read (abr);
                }
            }
            else
            {
                for (UInt32 i = 0; i < count; ++i)
                {
                    // Get the id of the type reader for this element,
                    // as this element might not be of Type T, it might be
                    // polymorphic.
                    Int32 objectTypeSerialiserId = abr.Read7BitEncodedInt32 ();
                    
                    if (objectTypeSerialiserId > 0)
                    {
                        // Locate the correct serialiser for this element.
                        AssetTypeSerialiser virtualElementSerialiser = 
                            this.manager.GetTypeSerialiserFromId (objectTypeSerialiserId);
                    
                        //
                        Object item = virtualElementSerialiser.BaseRead (abr);
                    
                        // add to array then move on
                        array [i] = (T)item;
                    }
                    else
                    {
                        // the element is null
                        array [i] = default(T);
                    }
                }
            }
            
            return array;
        }

        protected internal override void Write(AssetBinaryWriter abw, T[] obj)
        {
            throw new NotSupportedException();
        }
    }

