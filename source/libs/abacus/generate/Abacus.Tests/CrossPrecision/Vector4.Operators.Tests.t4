        // Test Operator: Equality //-----------------------------------------//

        /// <summary>
        /// Helper method for testing equality.
        /// </summary>
        void TestEquality (Vector4 a, Vector4 b, Boolean expected )
        {
            // This test asserts the following:
            //   (a == b) == expected
            //   (b == a) == expected
            //   (a != b) == !expected
            //   (b != a) == !expected

            Boolean result_1a = (a == b);
            Boolean result_1b = (a.Equals(b));
            Boolean result_1c = (a.Equals((Object)b));

            Boolean result_2a = (b == a);
            Boolean result_2b = (b.Equals(a));
            Boolean result_2c = (b.Equals((Object)a));

            Boolean result_3a = (a != b);
            Boolean result_4a = (b != a);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_1c, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
            Assert.That(result_2c, Is.EqualTo(expected));
            Assert.That(result_3a, Is.EqualTo(!expected));
            Assert.That(result_4a, Is.EqualTo(!expected));
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of TRUE when two equal
        /// Vector4 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_i ()
        {
            var a = new Vector4(44, -54, -22, 11);
            var b = new Vector4(44, -54, -22, 11);

            Boolean expected = true;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of FALSE when two unequal
        /// Vector4 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_ii ()
        {
            var a = new Vector4(44, 54, 2, 11);
            var b = new Vector4(44, -54, 2, -1);

            Boolean expected = false;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Tests to make sure that all the equality opperators and functions
        /// yield the expected result of TRUE when used on a number of randomly
        /// generated pairs of equal Vector4 objects.
        /// </summary>
        [Test]
        public void TestOperator_Equality_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector4();

                Vector4 b = a;

                this.TestEquality(a, b, true);
            }
        }


        // Test Operator: Addition //-----------------------------------------//

        /// <summary>
        /// Helper method for testing addition.
        /// </summary>
        void TestAddition (Vector4 a, Vector4 b, Vector4 expected )
        {
            // This test asserts the following:
            //   a + b == expected
            //   b + a == expected

            var result_1a = a + b;
            var result_2a = b + a;

            Vector4 result_1b; Vector4.Add(ref a, ref b, out result_1b);
            Vector4 result_2b; Vector4.Add(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the addition opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_i ()
        {
            var a = new Vector4(3, -6, 44, 11);
            var b = new Vector4(-6, 12, 18, -3);

            var expected = new Vector4(-3, 6, 62, 8);

            this.TestAddition(a, b, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving the zero vector, all the
        /// addition opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_ii ()
        {
            var a = new Vector4(-2313, 88, 199, 42);

            var expected = a;

            this.TestAddition(a, Vector4.Zero, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving two zero vectors, all the
        /// addition opperators and functions yield the correct result of zero.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iii ()
        {
            this.TestAddition(Vector4.Zero, Vector4.Zero, Vector4.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// addition opperators and functions yield the same results as a
        /// manual addition calculation.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector4();
                var b = GetNextRandomVector4();

                var expected = new Vector4(
                    a.X + b.X, a.Y + b.Y, a.Z + b.Z, a.W + b.W);

                this.TestAddition(a, b, expected);
            }
        }

        // Test Operator: Subtraction //--------------------------------------//

        /// <summary>
        /// Helper method for testing subtraction.
        /// </summary>
        void TestSubtraction (Vector4 a, Vector4 b, Vector4 expected )
        {
            // This test asserts the following:
            //   a - b == expected
            //   b - a == -expected

            var result_1a = a - b;
            var result_2a = b - a;

            Vector4 result_1b; Vector4.Subtract(ref a, ref b, out result_1b);
            Vector4 result_2b; Vector4.Subtract(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(-expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(-expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the subtraction opperators
        /// and functions yield the correct result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_i ()
        {
            var a = new Vector4(12, -4, 14, 18);
            var b = new Vector4(15, 11, 7, 27);
            var expected = new Vector4(-3, -15, 7, -9);
            this.TestSubtraction(a, b, expected);

            var c = new Vector4(-423, 342, 7, -800);
            this.TestSubtraction(c, Vector4.Zero, c);
        }

        /// <summary>
        /// Assert that when subtracting the zero vector fromt the zero vector,
        /// all the subtraction opperators and functions yield the correct
        /// result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_ii ()
        {
            this.TestSubtraction(Vector4.Zero, Vector4.Zero, Vector4.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// subtraction opperators and functions yield the same results as a
        /// manual subtraction calculation.
        /// </summary>
        [Test]
        public void TestOperator_Subtraction_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector4();
                var b = GetNextRandomVector4();

                var expected = new Vector4(
                    a.X - b.X, a.Y - b.Y, a.Z - b.Z, a.W - b.W);

                this.TestSubtraction(a, b, expected);
            }
        }

        // Test Operator: Negation //-----------------------------------------//

        /// <summary>
        /// Helper method for testing negation.
        /// </summary>
        void TestNegation (Vector4 a, Vector4 expected )
        {
            // This test asserts the following:
            //   -a == expected

            var result_1a = -a;

            Vector4 result_1b; Vector4.Negate(ref a, out result_1b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the negation opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_i ()
        {
            <#=T#> r = 3432;
            <#=T#> s = -6218;
            <#=T#> t = -3432;
            <#=T#> u = 6218;

            var a = new Vector4(r, s, t, u);
            var b = new Vector4(u, t, s, r);
            var c = new Vector4(t, u, r, s);
            var d = new Vector4(s, r, u, t);

            this.TestNegation(a, c);
            this.TestNegation(b, d);
        }

        /// <summary>
        /// Assert that, for known examples involving the zero vector, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_ii ()
        {
            <#=T#> t = -3432;
            <#=T#> u = 6218;
            <#=T#> r = 3432;
            <#=T#> s = -6218;

            var c = new Vector4(t, u, r, s);
            var d = new Vector4(s, r, u, t);

            this.TestNegation(c, Vector4.Zero - c);
            this.TestNegation(d, Vector4.Zero - d);
        }

        /// <summary>
        /// Assert that when negating the zero vector, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iii ()
        {
            this.TestNegation(Vector4.Zero, Vector4.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// negation opperators and functions yield the same results as a
        /// manual negation calculation.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector4();
                this.TestNegation(a, Vector4.Zero - a);
            }
        }

        // Test Operator: Multiplication //-----------------------------------//

        /// <summary>
        /// Helper method for testing multiplication.
        /// </summary>
        void TestMultiplication (Vector4 a, Vector4 b, Vector4 expected )
        {
            // This test asserts the following:
            //   a * b == expected
            //   b * a == expected

            var result_1a = a * b;
            var result_2a = b * a;

            Vector4 result_1b; Vector4.Multiply(ref a, ref b, out result_1b);
            Vector4 result_2b; Vector4.Multiply(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the multiplication opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_i ()
        {
            <#=T#> r = -27;
            <#=T#> s = 36;
            <#=T#> t = 9;
            <#=T#> u = -54;

            <#=T#> x = 3;
            <#=T#> y = 6;
            <#=T#> z = -9;

            var a = new Vector4(x, y, x, y);
            var b = new Vector4(z, y, x, z);
            var c = new Vector4(r, s, t, u);

            this.TestMultiplication(a, b, c);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// multiplication opperators and functions yield the same results as a
        /// manual multiplication calculation.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_ii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector4();
                var b = GetNextRandomVector4();

                var c = new Vector4(
                    a.X * b.X, a.Y * b.Y, a.Z * b.Z, a.W * b.W);

                this.TestMultiplication(a, b, c);
            }
        }


        // Test Operator: Division //-----------------------------------------//

        /// <summary>
        /// Helper method for testing division.
        /// </summary>
        void TestDivision (Vector4 a, Vector4 b, Vector4 expected )
        {
            // This test asserts the following:
            //   a / b == expected

            var result_1a = a / b;

            Vector4 result_1b; Vector4.Divide(ref a, ref b, out result_1b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example using whole numbers, all the
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_i ()
        {
            <#=T#> r = 10;
            <#=T#> s = -40;
            <#=T#> t = 1;
            <#=T#> u = -400;

            <#=T#> x = 2000;
            <#=T#> y = 200;
            <#=T#> z = -5;

            var a = new Vector4(x, y, x, x);
            var b = new Vector4(y, z, x, z);
            var c = new Vector4(r, s, t, u);

            this.TestDivision(a, b, c);
        }

        /// <summary>
        /// Assert that, for a known example using fractional numbers, all the
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_ii ()
        {
            <#=T#> s = 4;
            <#=T#> t = ((<#=T#>) 1 ) / ((<#=T#>) 10);
            <#=T#> u = ((<#=T#>) (-1) ) / ((<#=T#>) 40 );
            <#=T#> v = -20;
            <#=T#> w = 100;
            <#=T#> x = 2000;
            <#=T#> y = 200;
            <#=T#> z = -5;

            var a = new Vector4(y, z, w, v);
            var b = new Vector4(x, y, z, z);
            var c = new Vector4(t, u, v, s);

            this.TestDivision(a, b, c);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// division opperators and functions yield the same results as a
        /// manual addition division.
        /// </summary>
        [Test]
        public void TestOperator_Division_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomVector4();
                var b = GetNextRandomVector4();

                var c = new Vector4(
                    a.X / b.X, a.Y / b.Y, a.Z / b.Z, a.W / b.W);

                this.TestDivision(a, b, c);
            }
        }

