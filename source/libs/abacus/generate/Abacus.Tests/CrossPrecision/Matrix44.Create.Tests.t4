        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateTranslation_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateTranslation_ii ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateScale_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        //// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateScale_ii ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateScale_iii ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateRotationX_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateRotationY_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateRotationZ_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromAxisAngle_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromCartesianAxes_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateWorld_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromQuaternion_i ()
        {
            <#=T#> yaw; Maths.Pi(out yaw); yaw /= (<#=T#>) 4;
            <#=T#> pitch; Maths.Pi(out pitch); pitch /= (<#=T#>) (-8);
            <#=T#> roll; Maths.Pi(out roll); roll /= (<#=T#>) 2;

            Quaternion q; Quaternion.CreateFromYawPitchRoll(ref yaw, ref pitch, ref roll, out q);
            q.Normalise();

            Matrix44 m; Matrix44.CreateFromQuaternion(ref q, out m);

            Matrix44 expected = new Matrix44 ();
            expected.R0C0 = <#=T#>.Parse("-0.270598"); // this is a grim way to do it, make it so we can cast double to fixed
            expected.R0C1 = <#=T#>.Parse("0.9238795");
            expected.R0C2 = <#=T#>.Parse("-0.270598");
            expected.R0C3 = 0;
            expected.R1C0 = <#=T#>.Parse("-0.7071067");
            expected.R1C1 = <#=T#>.Parse("6.705523E-08");
            expected.R1C2 = <#=T#>.Parse("0.7071067");
            expected.R1C3 = 0;
            expected.R2C0 = <#=T#>.Parse("0.6532815");
            expected.R2C1 = <#=T#>.Parse("0.3826834");
            expected.R2C2 = <#=T#>.Parse("0.6532815");
            expected.R2C3 = 0;
            expected.R3C0 = 0;
            expected.R3C1 = 0;
            expected.R3C2 = 0;
            expected.R3C3 = 1;

            AssertEqualWithinReason(m, expected);
        }

        /// <summary>
        /// Assert that, for a number of examples, a random quaternion can be
        /// selected, converted to a Matrix44 then converted back to the same
        /// quaternion (assuming that the conversion back is correct).
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromQuaternion_ii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                Quaternion q = QuaternionTests.GetNextRandomQuaternion();
                Quaternion.Normalise(ref q, out q);

                Matrix44 m;
                Matrix44.CreateFromQuaternion(ref q, out m);

                Quaternion q2;
                Quaternion.CreateFromRotationMatrix(ref m, out q2);

                QuaternionTests.AssertEqualWithinReason(q, q2);
            }
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromYawPitchRoll_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateBillboard_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateConstrainedBillboard_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreatePerspectiveFieldOfView_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreatePerspective_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreatePerspectiveOffCenter_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateOrthographic_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateOrthographicOffCenter_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateLookAt_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

