        public sealed class TextureAsset
            : IAsset
        {
            public SurfaceFormat SurfaceFormat { get; set; }

            public Int32 Width { get; set; }
            public Int32 Height { get; set; }

            // Data allocated in standard system RAM
            public Byte[] Data { get; set; }

            // Data allocated in standard system RAM
            // public Byte[,] Mipmaps { get; set; }

            // public Int32 MipmapCount { get { return Data.GetLength (0); } }

            #region IAsset

            public String Id { get { return null; } }

            public List <Type> RequiredSerialisers ()
            {
                return new List <Type> ()
                {
                    typeof (Int32Serialiser),
                    typeof (ByteSerialiser),
                    typeof (EnumSerialiser<SurfaceFormat>)
                };
            }

            public void Serialise (BinaryReader br, TypeSerialiserDatabase tsdb)
            {
                this.SurfaceFormat = tsdb.GetTypeSerialiser <SurfaceFormat> ().Read (br);
                this.Width = tsdb.GetTypeSerialiser <Int32> ().Read (br);
                this.Height = tsdb.GetTypeSerialiser <Int32> ().Read (br);
                Int32 byteCount = tsdb.GetTypeSerialiser <Int32> ().Read (br);

                this.Data = new Byte[byteCount];

                for (Int32 i = 0; i < byteCount; ++i)
                {
                    this.Data[i] = tsdb.GetTypeSerialiser <Byte> ().Read (br);
                }
            }

            public void Serialise (BinaryWriter bw, TypeSerialiserDatabase tsdb)
            {
                tsdb.GetTypeSerialiser <SurfaceFormat> ().Write (bw, this.SurfaceFormat);
                tsdb.GetTypeSerialiser <Int32> ().Write (bw, this.Width);
                tsdb.GetTypeSerialiser <Int32> ().Write (bw, this.Height);
                tsdb.GetTypeSerialiser <Int32> ().Write (bw, this.Data.Length);

                for (Int32 i = 0; i < this.Data.Length; ++i)
                {
                    tsdb.GetTypeSerialiser <Byte> ().Write (bw, this.Data[i]);
                }
            }

            #endregion
        }

