    public class ResourceManager
        : IResourceManager
    {
        Dictionary<ShaderType, IShader> shaderCache;

        public ResourceManager()
        {
            shaderCache = new Dictionary<ShaderType, IShader>();

            shaderCache[ShaderType.Unlit] = CorShaders.CreateUnlit();
            shaderCache[ShaderType.VertexLit] = CorShaders.CreatePhongVertexLit();
            shaderCache[ShaderType.PixelLit] = CorShaders.CreatePhongPixelLit();
        }

        public T Load<T>(string path) where T : IResource
        {
            string rtype = Path.GetExtension(path);
            string rname = Path.Combine(
                Path.GetDirectoryName(path),
                Path.GetFileNameWithoutExtension(path));
            
            var correctPath =
                global::MonoMac.Foundation.NSBundle.MainBundle.PathForResource(rname, rtype);
            
            if(!File.Exists(correctPath))
            {
                throw new FileNotFoundException(correctPath);
            }

            if(typeof(T) == typeof(Texture2D))
            {
                var tex = OpenGLTexture.CreateFromFile(correctPath);
                
                return (T)(IResource) tex;
            }
            
            throw new NotImplementedException();
        }

        public IShader LoadShader(ShaderType shaderType)
        {
            if( !shaderCache.ContainsKey(shaderType) )
            {
                throw new NotImplementedException();
            }

            return shaderCache[shaderType];
        }
    }

