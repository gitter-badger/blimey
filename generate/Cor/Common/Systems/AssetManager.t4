    public sealed class AssetManager
    {
        readonly IGraphicsManager graphics;
        readonly ISystemManager systemManager;

        internal AssetManager (
            IGraphicsManager graphics,
            ISystemManager systemManager)
        {
            this.graphics = graphics;
            this.systemManager = systemManager;
        }

        public T Load<T> (String assetId)
        where T
            : class, IAsset
        {
            using (Stream stream = this.systemManager.GetAssetStream (assetId))
            {
                using (var br = new BinaryReader (stream))
                {
                    ProcessFileHeader (br);
                    List<Type> requiredTypeSerialisers = 
                        ProcessMeta (br);

                    var tsdb = new TypeSerialiserDatabase ();

                    foreach (Type typeSerialiserType in requiredTypeSerialisers)
                    {
                        tsdb.RegisterTypeSerialiser (typeSerialiserType);
                    }

                    T asset = Activator.CreateInstance (typeof (T)) as T;

                    asset.Serialise (br, tsdb);
                    return asset;
                }
            }
        }

        void ProcessFileHeader (BinaryReader br)
        {
            var tsdb = new TypeSerialiserDatabase ();

            tsdb.RegisterTypeSerialiser<Byte, ByteSerialiser>();

            // file type
            Byte f0 = tsdb.GetTypeSerialiser <Byte> ().Read (br);
            Byte f1 = tsdb.GetTypeSerialiser <Byte> ().Read (br);
            Byte f2 = tsdb.GetTypeSerialiser <Byte> ().Read (br);

            if (f0 != (Byte) 'C' || f1 != (Byte) 'B' || f2 != (Byte) 'B')
                throw new Exception ("Asset file doesn't have the correct header.");

            // file version
            Byte fileVersion = tsdb.GetTypeSerialiser <Byte> ().Read (br);

            if (fileVersion != 0)
                throw new Exception ("Only file format version 0 is supported.");

            // platform index
            Byte platformIndex = tsdb.GetTypeSerialiser <Byte> ().Read (br);
        }

        List<Type> ProcessMeta (BinaryReader br)
        {
            var result = new List<Type> ();
            var tsdb = new TypeSerialiserDatabase ();
            tsdb.RegisterTypeSerialiser<Byte, ByteSerialiser>();
            tsdb.RegisterTypeSerialiser<String, StringSerialiser>();

            Byte numRequiredTypeSerialisers =
                tsdb.GetTypeSerialiser <Byte> ().Read (br);

            for (Byte i = 0; i < numRequiredTypeSerialisers; ++i)
            {
                // Fully qualified  type serialiser name
                String assemblyQualifiedTypeSerialiserName =
                    tsdb.GetTypeSerialiser <String> ().Read (br);

                Type t = Type.GetType (assemblyQualifiedTypeSerialiserName);

                if (t == null)
                    throw new Exception ("Type not found:" + assemblyQualifiedTypeSerialiserName);

                // Type serialiser version
                Byte version = tsdb.GetTypeSerialiser <Byte> ().Read (br);

                if (version != 0)
                    throw new NotImplementedException ();

                result.Add (t);
            }

            return result;
        }
    }

