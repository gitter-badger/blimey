    // test reading lists containing different items from a chain of inheritance.
    public class ListSerialiser<T>
        : Serialiser<List<T>>
    {
        Serialiser<T> elementSerialiser;

        SerialiserDatabase manager;

        public ListSerialiser () {}

        public override void Initialise (SerialiserDatabase manager)
        {
            this.manager = manager;
            elementSerialiser = manager.GetSerialiser<T> ();
        }

        public override List<T> Read(BinaryReader abr)
        {
            UInt32 count = abr.ReadUInt32 ();

            var list = new List<T> ();

            Type objectType = typeof(T);

            if (objectType.IsValueType)
            {
                for (Int32 i = 0; i < count; ++i)
                {
                    // no inheritance for structs
                    T item = elementSerialiser.Read (abr);
                    list.Add(item);
                }
            }
            else
            {
                for (Int32 i = 0; i < count; ++i)
                {
                    // Get the id of the type reader for this element,
                    // as this element might not be of Type T, it might be
                    // polymorphic.
                    String virtualObjectTypeString = abr.ReadString();

                    if (!String.IsNullOrEmpty(virtualObjectTypeString))
                    {
                        Type virtualObjectType = Type.GetType (virtualObjectTypeString); 

                        if (virtualObjectType != null)
                        {
                            // Locate the correct serialiser for this element.
                            Serialiser virtualElementSerialiser =
                                this.manager.GetSerialiser(virtualObjectType);

                            //
                            Object item = virtualElementSerialiser.ReadObject (abr);

                            // add to list then move on
                            list.Add((T) item);

                            continue;
                        }
                    }

                    //otherwise
                    // the element is null
                    list.Add(default(T));
                }
            }

            return list;
        }

        public override void Write(BinaryWriter abw, List<T> obj)
        {
            // Write the item count.
            abw.Write ( (UInt32) obj.Count);

            Type objectType = typeof(T);

            if (objectType.IsValueType)
            {
                for (Int32 i = 0; i < obj.Count; ++i)
                {
                    // no inheritance for structs
                    elementSerialiser.Write (abw, obj[i]);
                }
            }
            else
            {
                for (Int32 i = 0; i < obj.Count; ++i)
                {
                    // no inheritance for structs
                    var elem = obj[i];

                    if (elem == null)
                    {
                        abw.Write ("");
                    }
                    else
                    {
                        Type t = elem.GetType ();

                        abw.Write ((String) t.ToString ());

                        Serialiser virtualElementSerialiser =
                            this.manager.GetSerialiser(t);

                        virtualElementSerialiser.WriteObject (abw, elem);
                    }
                }
            }
        }
    }

