        /// <summary>
        /// The random number generator used for testing.
        /// </summary>
        static readonly System.Random rand;

        /// <summary>
        /// Static constructor used to ensure that the random number generator
        /// always gets initilised with the same seed, making the tests
        /// behave in a deterministic manner.
        /// </summary>
        static QuaternionTests ()
        {
            rand = new System.Random(0);
        }

        /// <summary>
        /// Helper function for getting the next random <#=T#> value.
        /// </summary>
        static <#=T#> GetNextRandom<#=T#> ()
        {
            <#=T#> randomValue = rand.Next<#=T#>();

            <#=T#> zero = 0;
            <#=T#> multiplier = 1000;

            randomValue *= multiplier;

            Boolean randomBoolean = (rand.Next(0, 1) == 0) ? true : false;

            if( randomBoolean )
                randomValue = zero - randomValue;

            return randomValue;
        }

        /// <summary>
        /// Helper function for getting the next random Quaternion.
        /// </summary>
        internal static Quaternion GetNextRandomQuaternion ()
        {
            <#=T#> i = GetNextRandom<#=T#>();
            <#=T#> j = GetNextRandom<#=T#>();
            <#=T#> k = GetNextRandom<#=T#>();
            <#=T#> u = GetNextRandom<#=T#>();

            return new Quaternion(i, j, k, u);
        }

        /// <summary>
        /// Helper to encapsulate asserting that two Quaternions are equal.
        /// </summary>
        internal static void AssertEqualWithinReason (Quaternion a, Quaternion b)
        {
            <#=T#> tolerance; MathsTests.TestTolerance(out tolerance);

            Assert.That(a.I, Is.EqualTo(b.I).Within(tolerance));
            Assert.That(a.J, Is.EqualTo(b.J).Within(tolerance));
            Assert.That(a.K, Is.EqualTo(b.K).Within(tolerance));
            Assert.That(a.U, Is.EqualTo(b.U).Within(tolerance));
        }

