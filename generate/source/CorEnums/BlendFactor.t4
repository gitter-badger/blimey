    //               ogles2.0
    // 
    // factor        | s | d |
    // ------------------------------------
    // zero          | o | o |
    // one           | o | o |
    // src-col       | o | o |
    // inv-src-col   | o | o |
    // src-a         | o | o |
    // inv-src-a     | o | o |
    // dest-a        | o | o |
    // inv-dest-a    | o | o |
    // dest-col      | o | o |
    // inv-dest-col  | o | o |
    // src-a-sat     | o | x |  <-- ignore for now

    // xna deals with the following as one colour...

    // const-col     | o | o |  <-- ignore for now
    // inv-const-col | o | o |  <-- ignore for now
    // const-a       | o | o |  <-- ignore for now
    // inv-const-a   | o | o |  <-- ignore for now


    // Defines colour blending factors.
    public enum BlendFactor
    {
        // Each component of the colour is multiplied by (0, 0, 0, 0).
        Zero,

        // Each component of the colour is multiplied by (1, 1, 1, 1).
        One,

        // Each component of the colour is multiplied by the source colour.
        // This can be represented as (Rs, Gs, Bs, As), where R, G, B, and A 
        // respectively stand for the red, green, blue, and alpha source values.
        SourceColour,

        // Each component of the colour is multiplied by the inverse of the 
        // source colour. This can be represented as
        // (1 − Rs, 1 − Gs, 1 − Bs, 1 − As) where R, G, B, and A respectively 
        // stand for the red, green, blue, and alpha destination values.
        InverseSourceColour,

        // Each component of the colour is multiplied by the alpha value of the 
        // source. This can be represented as (As, As, As, As), where As is the 
        // alpha source value.
        SourceAlpha,

        // Each component of the colour is multiplied by the inverse of the alpha
        // value of the source. This can be represented as 
        // (1 − As, 1 − As, 1 − As, 1 − As), where As is the alpha destination 
        // value.
        InverseSourceAlpha,

        // Each component of the colour is multiplied by the alpha value of the 
        // destination. This can be represented as (Ad, Ad, Ad, Ad), where Ad is
        // the destination alpha value.
        DestinationAlpha,

        // Each component of the colour is multiplied by the inverse of the alpha
        // value of the destination. This can be represented as
        // (1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad), where Ad is the alpha destination 
        // value.
        InverseDestinationAlpha,

        // Each component colour is multiplied by the destination colour. This can
        // be represented as (Rd, Gd, Bd, Ad), where R, G, B, and A respectively
        // stand for red, green, blue, and alpha destination values.
        DestinationColour,

        // Each component of the colour is multiplied by the inverse of the 
        // destination colour. This can be represented as 
        // (1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad), where Rd, Gd, Bd, and Ad 
        // respectively stand for the red, green, blue, and alpha destination 
        // values.
        InverseDestinationColour,

        // Each component of the colour is multiplied by either the alpha of the 
        // source colour, or the inverse of the alpha of the source colour, 
        // whichever is greater. This can be represented as (f, f, f, 1), 
        // where f = min(A, 1 − Ad).
        //SourceAlphaSaturation,

        // Each component of the colour is multiplied by a constant set in 
        // BlendFactor.
        //ConstantColour,

        // Each component of the colour is multiplied by the inverse of a 
        // constant set in BlendFactor.
        //InverseConstantColour,

    }

