    public class RandomGenerator
    {
        internal Random Random
        {
            get { return random; }
        }

        Random random;

        public static RandomGenerator Default
        {
            get { return defaultGenerator; }
        }

        static RandomGenerator defaultGenerator = new RandomGenerator();

        public RandomGenerator(Int32 seed)
        {
            random = SetSeed(0);
        }

        public RandomGenerator()
        {
            random = SetSeed(0);
        }

        public Random SetSeed(Int32 seed)
        {
            if (seed == 0)
            {
                random = new Random((Int32)DateTime.Now.Ticks);
            }
            else
            {
                random = new Random(seed);
            }

            return random;
        }

        public Single GetRandomSingle(Single min, Single max)
        {
            return ((Single)random.NextDouble() * (max - min)) + min;
        }

        public Int32 GetRandomInt32(Int32 max)
        {
            return random.Next(max);
        }

        public Byte GetRandomByte()
        {
            Byte[] b = new Byte[1];
            random.NextBytes(b);
            return b[0];
        }

        public Boolean GetRandomBoolean()
        {
            Int32 i = random.Next(2);
            if (i > 0)
            {
                return true;
            }

            return false;
        }

        [CLSCompliant(false)]
        public Rgba32 GetRandomColour()
        {
            Single min = 0.25f;
            Single max = 1f;

            Single r = (Single)random.NextDouble() * (max - min) + min;
            Single g = (Single)random.NextDouble() * (max - min) + min;
            Single b = (Single)random.NextDouble() * (max - min) + min;
            Single a = 1f;

            return new Rgba32(r, g, b, a);
        }

        [CLSCompliant(false)]
        public Vector2 GetRandomVector2(Single min, Single max)
        {
            Single x = (Single)random.NextDouble() * (max - min) + min;
            Single y = (Single)random.NextDouble() * (max - min) + min;

            return new Vector2(x, y);
        }

        [CLSCompliant(false)]
        public Vector3 GetRandomVector3(Single min, Single max)
        {
            Single x = (Single)random.NextDouble() * (max - min) + min;
            Single y = (Single)random.NextDouble() * (max - min) + min;
            Single z = (Single)random.NextDouble() * (max - min) + min;

            return new Vector3(x, y, z);
        }

        [CLSCompliant(false)]
        public Vector3 GetRandomNormalisedVector3()
        {
            Single max = 1f;
            Single min = 1f;

            Single x = (Single)random.NextDouble() * (max - min) + min;
            Single y = (Single)random.NextDouble() * (max - min) + min;
            Single z = (Single)random.NextDouble() * (max - min) + min;

            var result = new Vector3(x, y, z);

            Vector3.Normalise(ref result, out result);

            return result;
        }

        [CLSCompliant(false)]
        public Vector4 GetRandomVector4(Single min, Single max)
        {
            Single x = (Single)random.NextDouble() * (max - min) + min;
            Single y = (Single)random.NextDouble() * (max - min) + min;
            Single z = (Single)random.NextDouble() * (max - min) + min;
            Single w = (Single)random.NextDouble() * (max - min) + min;

            return new Vector4(x, y, z, w);
        }

        /// <summary>
        /// Pick a random element from an indexable collection
        /// </summary>
        /// <typeparam name="T">Return type</typeparam>
        /// <param name="random">'this' parameter</param>
        /// <param name="choices">Collection to pick an element from</param>
        /// <returns></returns>
        public object Choose(System.Collections.IList choices)
        {
            return choices[random.Next(choices.Count)];
        }

        /// <summary>
        /// Pick a random value from an enum
        /// </summary>
        /// <typeparam name="T">Enum type to pick from</typeparam>
        /// <param name="random">'this' parameter</param>
        /// <param name="enumType">the enum type to pick from</param>
        /// <returns></returns>
        public object ChooseFromEnum(Type enumType)
        {
            return Choose(Enum.GetValues(enumType));
        }
    }

