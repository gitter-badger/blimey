    public abstract class AssetTypeSerialiser
    {
        readonly Type targetType;

        public Type TargetType
        {
            get { return this.targetType; }
        }

        protected AssetTypeSerialiser(Type targetType)
        {
            this.targetType = targetType;
        }

        protected internal abstract Object BaseRead (AssetBinaryReader abr);

        protected internal abstract void BaseWrite (AssetBinaryWriter abw, Object obj);
    }

    public abstract class AssetTypeSerialiser<T>
        : AssetTypeSerialiser
    {
        protected AssetTypeSerialiser()
            : base(typeof(T))
        {

        }
        
        protected internal virtual void Initialise (AssetTypeSerialiserManager manager) {}

        protected internal override Object BaseRead (AssetBinaryReader abr)
        {
            return this.Read (abr);
        }

        protected internal override void BaseWrite (AssetBinaryWriter abw, Object obj)
        {
            this.Write(abw, (T) obj);
        }

        protected internal abstract T Read (AssetBinaryReader abr);

        protected internal abstract void Write (AssetBinaryWriter abw, T obj);
    }

