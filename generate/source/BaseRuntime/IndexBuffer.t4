	public abstract class IndexBuffer
		: IIndexBuffer
	{
		static internal UInt16[] ConvertToUnsigned (Int32[] indexBuffer)
		{	
			UInt16[] udata = new UInt16[indexBuffer.Length];

			for(Int32 i = 0; i < indexBuffer.Length; ++i)
			{
				udata[i] = (UInt16) indexBuffer[i];
			}
			
			return udata;
		}
		
		public virtual void GetData(Int32[] data)
		{
			throw new NotImplementedException();	
		}

		public virtual void GetData(Int16[] data, Int32 startIndex, Int32 elementCount)
		{
			throw new NotImplementedException();	
		}

		public virtual void GetData(Int32 offsetInBytes, Int16[] data, Int32 startIndex, Int32 elementCount)
		{
			throw new NotImplementedException();	
		}

		public virtual void SetData(Int32[] data)
		{
			throw new NotImplementedException();	
		}

		public virtual void SetData(Int16[] data, Int32 startIndex, Int32 elementCount)
		{
			throw new NotImplementedException();	
		}

		public virtual void SetData(Int32 offsetInBytes, Int16[] data, Int32 startIndex, Int32 elementCount)
		{
			throw new NotImplementedException();	
		}

		public virtual Int32 IndexCount
		{ 
			get	
			{
				throw new NotImplementedException();	
			}
		}
	}
