    public sealed class Keyboard
        : IKeyboard
    {
        readonly HashSet<Char> characterKeysThatAreDown = new HashSet<Char>();
        readonly HashSet<FunctionalKey> functionalKeysThatAreDown = new HashSet<FunctionalKey>();

        internal void KeyDown (NSEvent theEvent)
        {
            theEvent.Characters
                .ToCharArray ()
                .Where(x => !IsFunctionalKey(x))
                .ToList ()
                .ForEach (x => characterKeysThatAreDown.Add(x));

            var fKey = GetFunctionalKey(theEvent.KeyCode);
            if( fKey.HasValue ) functionalKeysThatAreDown.Add(fKey.Value);
        }

        internal void KeyUp (NSEvent theEvent)
        {
            theEvent.Characters
                .ToCharArray ()
                .Where(x => !IsFunctionalKey(x))
                .ToList ()
                .ForEach (x => characterKeysThatAreDown.Remove(x));

            var fKey = GetFunctionalKey(theEvent.KeyCode);
            if( fKey.HasValue ) functionalKeysThatAreDown.Remove(fKey.Value);
        }

        static FunctionalKey? GetFunctionalKey (UInt16 hardwareIndependantKeyCode)
        {
            if (hardwareIndependantKeyCode == 0x24) return FunctionalKey.Enter;
            if (hardwareIndependantKeyCode == 0x7c) return FunctionalKey.Right;
            if (hardwareIndependantKeyCode == 0x7b) return FunctionalKey.Left;
            if (hardwareIndependantKeyCode == 0x7e) return FunctionalKey.Up;
            if (hardwareIndependantKeyCode == 0x7d) return FunctionalKey.Down;
            if (hardwareIndependantKeyCode == 0x31) return FunctionalKey.Spacebar;
            if (hardwareIndependantKeyCode == 0x35) return FunctionalKey.Escape;

            return null;
        }

        static Boolean IsFunctionalKey (Char c)
        {
            if (c == '\r') return true;
            if (c == '\n') return true;
            if (c == '\t') return true;

            return false;
        }

        #region IKeyboard

        public FunctionalKey[] GetPressedFunctionalKey ()
        {
            return functionalKeysThatAreDown.ToArray();
        }

        public Boolean IsFunctionalKeyDown (FunctionalKey key)
        {
            return functionalKeysThatAreDown.Contains(key);
        }

        public Boolean IsFunctionalKeyUp (FunctionalKey key)
        {
            return !functionalKeysThatAreDown.Contains(key);
        }

        public KeyState this [FunctionalKey key]
        {
            get
            {
                return functionalKeysThatAreDown.Contains(key)
                    ? KeyState.Down
                    : KeyState.Up;
            }
        }

        public Char[] GetPressedCharacterKeys()
        {
            return characterKeysThatAreDown.ToArray();
        }

        public Boolean IsCharacterKeyDown (Char key)
        {
            return characterKeysThatAreDown.Contains(key);
        }

        public Boolean IsCharacterKeyUp (Char key)
        {
            return !characterKeysThatAreDown.Contains(key);
        }

        public KeyState this [Char key]
        {
            get
            {
                return characterKeysThatAreDown.Contains(key)
                    ? KeyState.Down
                    : KeyState.Up;
            }
        }

        #endregion
    }

