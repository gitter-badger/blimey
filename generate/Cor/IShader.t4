	/// <summary>
	/// this interface provides a way to interact with a
	/// shader loaded on the GPU
	/// </summary>
	public interface IShader
	{
		/// <summary>
		/// Resets all the shader's variables to their default values.
		/// </summary>
		void ResetVariables();
		
		/// <summary>
		/// Sets the value of a specified shader variable.
		/// </summary>
		void SetVariable<T>(string name, T value);
		
		/// <summary>
		/// Sets the texture slot that a texture sampler should sample from.
		/// </summary>
		void SetSamplerTarget(string name, Int32 textureSlot);

		/// <summary>
		/// Provides access to the individual passes in this shader.
		/// the calling code can itterate though these and apply them 
		/// to the graphics context before it makes a draw call.
		/// </summary>
		IShaderPass[] Passes { get; }
		
		/// <summary>
		/// Defines which vertex elements are required by this shader.
		/// </summary>
		VertexElementUsage[] RequiredVertexElements { get; }

		/// <summary>
		/// Defines which vertex elements are optionally used by this
		/// shader if they happen to be present.
		/// </summary>
		VertexElementUsage[] OptionalVertexElements { get; }

		// <summary>
		// The name of this shader.
		// </summary>
		string Name { get; }
	}

