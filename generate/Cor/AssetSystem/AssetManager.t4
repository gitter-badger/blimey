    public sealed class AssetManager
        : IDisposable
    {
        readonly IGraphicsManager graphics;
        readonly IOldResourceManager legacyResources;

        internal AssetManager (
            IGraphicsManager graphics,
            IOldResourceManager legacyResources)
        {
            this.graphics = graphics;
            this.legacyResources = legacyResources;
        }

        public T Load<T> (String assetId)
        {
            if (typeof (T) == typeof (IShader))
            {
                if (assetId.Contains ("pixel"))
                    return (T) legacyResources.LoadShader (ShaderType.PixelLit);

                if (assetId.Contains ("vertex"))
                    return (T) legacyResources.LoadShader (ShaderType.VertexLit);

                if (assetId.Contains ("unlit"))
                    return (T) legacyResources.LoadShader (ShaderType.Unlit);
            }

            if (typeof (T) == typeof (Texture2D))
            {
                Texture2D tex = legacyResources.Load<Texture2D> (
                    "resources/" + assetId.Replace (".cba", "") + ".png");

                return (T) (Object) tex;
            }

            throw new NotImplementedException ();
        }

        public void Unload ()
        {

        }

        public void Dispose ()
        {

        }
    }

