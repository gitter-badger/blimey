    // EnumSerialiser<T>
    // test
    // enum Foo : long { One, Two };
    // enum Bar : byte { x = 255 };
    public class EnumSerialiser<T>
        : Serialiser<T>
    {
        Serialiser underlyingSerialiser;

        public EnumSerialiser () {}

        public override void Initialise(SerialiserDatabase manager)
        {
            // can we not get this at compile time? -_-
            // lets stick with Int32 for now
            Type readerType = Enum.GetUnderlyingType(typeof(T));

            underlyingSerialiser = manager.GetSerialiser(readerType);
        }

        public override T Read(BinaryReader abr)
        {
            Object underlyingValue = underlyingSerialiser.ReadObject(abr);

            return (T) underlyingValue;
        }

        public override void Write(BinaryWriter abw, T obj)
        {
            underlyingSerialiser.WriteObject (abw, obj);
        }
    }

