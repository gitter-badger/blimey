    public static class KrMatrix44Converter
    {
        const bool flip = false;

        // MATRIX
        public static KhronosMatrix4 ToKhronos (this Abacus.SinglePrecision.Matrix44 mat)
        {
            if( flip )
            {
                return new KhronosMatrix4(
                    mat.R0C0, mat.R1C0, mat.R2C0, mat.R3C0,
                    mat.R0C1, mat.R1C1, mat.R2C1, mat.R3C1,
                    mat.R0C2, mat.R1C2, mat.R2C2, mat.R3C2,
                    mat.R0C3, mat.R1C3, mat.R2C3, mat.R3C3);
            }
            else
            {
                return new KhronosMatrix4(
                    mat.R0C0, mat.R1C0, mat.R2C0, mat.R3C0,
                    mat.R0C1, mat.R1C1, mat.R2C1, mat.R3C1,
                    mat.R0C2, mat.R1C2, mat.R2C2, mat.R3C2,
                    mat.R0C3, mat.R1C3, mat.R2C3, mat.R3C3);
            }
        }

        public static Abacus.SinglePrecision.Matrix44 ToAbacus (this KhronosMatrix4 mat)
        {

            if( flip )
            {
                return new Abacus.SinglePrecision.Matrix44(
                    mat.M11, mat.M12, mat.M13, mat.M14,
                    mat.M21, mat.M22, mat.M23, mat.M24,
                    mat.M31, mat.M32, mat.M33, mat.M34,
                    mat.M41, mat.M42, mat.M43, mat.M44);
            }
            else
            {
                return new Abacus.SinglePrecision.Matrix44(
                    mat.M11, mat.M12, mat.M13, mat.M14,
                    mat.M21, mat.M22, mat.M23, mat.M24,
                    mat.M31, mat.M32, mat.M33, mat.M34,
                    mat.M41, mat.M42, mat.M43, mat.M44);
            }
        }
    }

