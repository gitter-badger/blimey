        /// <summary>
        /// todo
        /// </summary>
        Rgba32(UInt32 packedValue)
        {
            this.packedValue = packedValue;
        }

        /// <summary>
        /// todo
        /// </summary>
        public Rgba32(Int32 r, Int32 g, Int32 b)
        {
            if ((((r | g) | b) & -256) != 0)
            {
                r = ClampToByte64((Int64)r);
                g = ClampToByte64((Int64)g);
                b = ClampToByte64((Int64)b);
            }

            g = g << 8;
            b = b << 0x10;

            this.packedValue = (UInt32)(((r | g) | b) | -16777216);
        }

        /// <summary>
        /// todo
        /// </summary>
        public Rgba32(Int32 r, Int32 g, Int32 b, Int32 a)
        {
            if (((((r | g) | b) | a) & -256) != 0)
            {
                r = ClampToByte32(r);
                g = ClampToByte32(g);
                b = ClampToByte32(b);
                a = ClampToByte32(a);
            }

            g = g << 8;
            b = b << 0x10;
            a = a << 0x18;

            this.packedValue = (UInt32)(((r | g) | b) | a);
        }

        /// <summary>
        /// todo
        /// </summary>
        public Rgba32 (Single r, Single g, Single b)
        {
            Pack (r, g, b, 1f, out this.packedValue);
        }

        /// <summary>
        /// todo
        /// </summary>
        public static Rgba32 FromNonPremultiplied(Single zR, Single zG, Single zB, Single zA)
        {
            Rgba32 color;
            Pack(zR * zA, zG * zA, zB * zA, zA, out color.packedValue);
            return color;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static Rgba32 FromNonPremultiplied(int r, int g, int b, int a)
        {
            Rgba32 color;
            r = ClampToByte64((r * a) / 0xffL);
            g = ClampToByte64((g * a) / 0xffL);
            b = ClampToByte64((b * a) / 0xffL);
            a = ClampToByte32(a);
            g = g << 8;
            b = b << 0x10;
            a = a << 0x18;
            color.packedValue = (UInt32)(((r | g) | b) | a);
            return color;
        }

        /// <summary>
        /// todo
        /// </summary>
        static Int32 ClampToByte32(Int32 value)
        {
            if (value < 0)
            {
                return 0;
            }

            if (value > 0xff)
            {
                return 0xff;
            }

            return value;
        }

        /// <summary>
        /// todo
        /// </summary>
        static Int32 ClampToByte64(Int64 value)
        {
            if (value < 0L)
            {
                return 0;
            }

            if (value > 0xffL)
            {
                return 0xff;
            }

            return (Int32)value;
        }


        /// <summary>
        /// This function linearly interpolates each component of a Rgba32
        /// separately and returns a Rgba32 with the new component values.
        /// </summary>
        public static Rgba32 Lerp(Rgba32 value1, Rgba32 value2, Single amount)
        {
            if (amount > 1f)
                throw new ArgumentException("Amount: " + amount + " must be <= 1.");

            if (amount < 0f)
                throw new ArgumentException("Amount: " + amount + " must be >= 0.");

            Rgba32 colour;
            UInt32 packedValue1 = value1.packedValue;
            UInt32 packedValue2 = value2.packedValue;

            Int32 r1 = (Byte) (packedValue1);
            Int32 g1 = (Byte) (packedValue1 >> 8);
            Int32 b1 = (Byte) (packedValue1 >> 0x10);
            Int32 a1 = (Byte) (packedValue1 >> 0x18);

            Int32 r2 = (Byte) (packedValue2);
            Int32 g2 = (Byte) (packedValue2 >> 8);
            Int32 b2 = (Byte) (packedValue2 >> 0x10);
            Int32 a2 = (Byte) (packedValue2 >> 0x18);

            Int32 num = (Int32) PackUtils.PackUnsignedNormalisedValue(65536f, amount);

            Int32 r = r1 + (((r2 - r1) * num) >> 0x10);
            Int32 g = g1 + (((g2 - g1) * num) >> 0x10);
            Int32 b = b1 + (((b2 - b1) * num) >> 0x10);
            Int32 a = a1 + (((a2 - a1) * num) >> 0x10);

            colour.packedValue =
                (UInt32)(((r | (g << 8)) | (b << 0x10)) | (a << 0x18));

            return colour;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static Rgba32 Desaturate(Rgba32 colour, float desaturation)
        {
            throw new NotImplementedException ();
            /*
            System.Diagnostics.Debug.Assert(desaturation <= 1f && desaturation >= 0f);

            var luminanceWeights = new SinglePrecision.Vector3(0.299f, 0.587f, 0.114f);

            SinglePrecision.Vector4 colourVec4;

            colour.UnpackTo(out colourVec4);

            SinglePrecision.Vector3 colourVec = new SinglePrecision.Vector3(colourVec4.X, colourVec4.Y, colourVec4.Z);

            float luminance;

            SinglePrecision.Vector3.Dot(ref luminanceWeights, ref colourVec, out luminance);

            SinglePrecision.Vector3 lumVec = new SinglePrecision.Vector3(luminance, luminance, luminance);

            SinglePrecision.Vector3.Lerp(ref colourVec, ref lumVec, ref desaturation, out colourVec);

            return new Rgba32(colourVec.X, colourVec.Y, colourVec.Z, colourVec4.W);
            */
        }

