    public sealed class AssetManager
    {
        readonly IGraphicsManager graphics;
        readonly ISystemManager systemManager;

        internal AssetManager (
            IGraphicsManager graphics,
            ISystemManager systemManager)
        {
            this.graphics = graphics;
            this.systemManager = systemManager;
        }

        public T Load<T> (String assetId)
        where T
            : class, IAsset
        {
            using (Stream stream = this.systemManager.GetAssetStream (assetId))
            {
                using (var channel = 
                    new SerialisationChannel
                    <BinaryPrimitiveReader, BinaryPrimitiveWriter> 
                    (SerialiserDatabase.Instance, stream, SerialisationChannelMode.Read)) 
                {
                    ProcessFileHeader (channel);
                    T asset = channel.Read <T> ();
                    return asset;
                }
            }
        }

        void ProcessFileHeader (ISerialisationChannel sc)
        {
            // file type
            Byte f0 = sc.Read <Byte> ();
            Byte f1 = sc.Read <Byte> ();
            Byte f2 = sc.Read <Byte> ();

            if (f0 != (Byte) 'C' || f1 != (Byte) 'B' || f2 != (Byte) 'A')
                throw new Exception ("Asset file doesn't have the correct header.");

            // file version
            Byte fileVersion = sc.Read <Byte> ();

            if (fileVersion != 0)
                throw new Exception ("Only file format version 0 is supported.");

            // platform index
            Byte platformIndex = sc.Read <Byte> ();
        }
    }

