    public sealed class Keyboard
        : IKeyboard
    {
        readonly HashSet<Char> characterKeysThatAreDown = new HashSet<Char>();
        readonly HashSet<FunctionalKey> functionalKeysThatAreDown = new HashSet<FunctionalKey>();

        internal void KeyDown (NSEvent theEvent)
        {
            theEvent.Characters
                .ToCharArray ()
                .Where(x => !IsFunctionalKey(x))
                .ToList ()
                .ForEach (x => characterKeysThatAreDown.Add(x));

            var fKey = GetFunctionalKey(theEvent.KeyCode);
            if( fKey.HasValue ) functionalKeysThatAreDown.Add(fKey.Value);
        }

        internal void KeyUp (NSEvent theEvent)
        {
            theEvent.Characters
                .ToCharArray ()
                .Where(x => !IsFunctionalKey(x))
                .ToList ()
                .ForEach (x => characterKeysThatAreDown.Remove(x));

            var fKey = GetFunctionalKey(theEvent.KeyCode);
            if( fKey.HasValue ) functionalKeysThatAreDown.Remove(fKey.Value);
        }

        static FunctionalKey? GetFunctionalKey (UInt16 hardwareIndependantKeyCode)
        {
            if (hardwareIndependantKeyCode == 0x24) return FunctionalKey.Enter;
            if (hardwareIndependantKeyCode == 0x7C) return FunctionalKey.Right;
            if (hardwareIndependantKeyCode == 0x7B) return FunctionalKey.Left;
            if (hardwareIndependantKeyCode == 0x7E) return FunctionalKey.Up;
            if (hardwareIndependantKeyCode == 0x7D) return FunctionalKey.Down;
            if (hardwareIndependantKeyCode == 0x31) return FunctionalKey.Spacebar;
            if (hardwareIndependantKeyCode == 0x35) return FunctionalKey.Escape;
            if (hardwareIndependantKeyCode == 0x30) return FunctionalKey.Tab;
            if (hardwareIndependantKeyCode == 0x33) return FunctionalKey.Backspace;
            if (hardwareIndependantKeyCode == 0x74) return FunctionalKey.PageUp;
            if (hardwareIndependantKeyCode == 0x79) return FunctionalKey.PageDown;
            if (hardwareIndependantKeyCode == 0x73) return FunctionalKey.Home;
            if (hardwareIndependantKeyCode == 0x3C) return FunctionalKey.RightShift;
            if (hardwareIndependantKeyCode == 0x38) return FunctionalKey.LeftShift;

            if (hardwareIndependantKeyCode == 0x7A) return FunctionalKey.F1;
            if (hardwareIndependantKeyCode == 0x78) return FunctionalKey.F2;
            if (hardwareIndependantKeyCode == 0x63) return FunctionalKey.F3;
            if (hardwareIndependantKeyCode == 0x76) return FunctionalKey.F4;
            if (hardwareIndependantKeyCode == 0x60) return FunctionalKey.F5;
            if (hardwareIndependantKeyCode == 0x61) return FunctionalKey.F6;
            if (hardwareIndependantKeyCode == 0x62) return FunctionalKey.F7;
            if (hardwareIndependantKeyCode == 0x64) return FunctionalKey.F8;
            if (hardwareIndependantKeyCode == 0x65) return FunctionalKey.F9;
            if (hardwareIndependantKeyCode == 0x6D) return FunctionalKey.F10;
            if (hardwareIndependantKeyCode == 0x67) return FunctionalKey.F11;
            if (hardwareIndependantKeyCode == 0x6F) return FunctionalKey.F12;
            if (hardwareIndependantKeyCode == 0x69) return FunctionalKey.F13;
            if (hardwareIndependantKeyCode == 0x6B) return FunctionalKey.F14;
            if (hardwareIndependantKeyCode == 0x71) return FunctionalKey.F15;
            if (hardwareIndependantKeyCode == 0x6A) return FunctionalKey.F16;
            if (hardwareIndependantKeyCode == 0x40) return FunctionalKey.F17;
            if (hardwareIndependantKeyCode == 0x4F) return FunctionalKey.F18;
            if (hardwareIndependantKeyCode == 0x50) return FunctionalKey.F19;
            if (hardwareIndependantKeyCode == 0x5A) return FunctionalKey.F20;

            /*
            kVK_Command                   = 0x37,
            kVK_CapsLock                  = 0x39,
            kVK_Option                    = 0x3A,
            kVK_Control                   = 0x3B,
            kVK_RightOption               = 0x3D,
            kVK_RightControl              = 0x3E,
            kVK_Function                  = 0x3F,
            kVK_VolumeUp                  = 0x48,
            kVK_VolumeDown                = 0x49,
            kVK_Mute                      = 0x4A,
            kVK_Help                      = 0x72,
            kVK_ForwardDelete             = 0x75,
            kVK_End                       = 0x77,
            */

            return null;
        }

        static Boolean IsFunctionalKey (Char c)
        {
            if (c == '\r') return true;
            if (c == '\n') return true;
            if (c == '\t') return true;

            return false;
        }

        #region IKeyboard

        public FunctionalKey[] GetPressedFunctionalKey ()
        {
            return functionalKeysThatAreDown.ToArray();
        }

        public Boolean IsFunctionalKeyDown (FunctionalKey key)
        {
            return functionalKeysThatAreDown.Contains(key);
        }

        public Boolean IsFunctionalKeyUp (FunctionalKey key)
        {
            return !functionalKeysThatAreDown.Contains(key);
        }

        public KeyState this [FunctionalKey key]
        {
            get
            {
                return functionalKeysThatAreDown.Contains(key)
                    ? KeyState.Down
                    : KeyState.Up;
            }
        }

        public Char[] GetPressedCharacterKeys()
        {
            return characterKeysThatAreDown.ToArray();
        }

        public Boolean IsCharacterKeyDown (Char key)
        {
            return characterKeysThatAreDown.Contains(key);
        }

        public Boolean IsCharacterKeyUp (Char key)
        {
            return !characterKeysThatAreDown.Contains(key);
        }

        public KeyState this [Char key]
        {
            get
            {
                return characterKeysThatAreDown.Contains(key)
                    ? KeyState.Down
                    : KeyState.Up;
            }
        }

        #endregion
    }

