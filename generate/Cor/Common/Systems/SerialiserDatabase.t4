    public class SerialiserDatabase
    {
        // Target type to type serialiser implementation.
        readonly Dictionary<Type, Serialiser> assetSerialisers;

        public SerialiserDatabase()
        {
            assetSerialisers = new Dictionary<Type, Serialiser> ();
        }

        public void RegisterSerialiser (Type serialiserType)
        {
            Type baseType = 
                serialiserType.BaseType;

            Type targetType = 
                baseType.GetGenericArguments() [0];
            
            MethodInfo mi = typeof(SerialiserDatabase).GetMethod ("RegisterSerialiser", new Type[]{});
            
            if (mi == null)
            {
                throw new Exception ("Failed to find the SerialiserDatabase's RegisterSerialiser method.");    
            }
            
            var gmi = mi.MakeGenericMethod(targetType, serialiserType);

            try
            {
                gmi.Invoke(this, null);
            }
            catch (Exception ex)
            {
                throw new Exception (
                    "Failed to call generic RegisterSerialiser " +
                    "with reflection: " + gmi + " --> " + ex.InnerException);
            }
        }

        public void RegisterSerialiser<TTarget, TSerialiser> ()
        where TSerialiser : Serialiser <TTarget>
        {
            if (assetSerialisers.ContainsKey (typeof(TTarget)))
            {
                var existingSerialiser = assetSerialisers[typeof(TTarget)];

                if (existingSerialiser.GetType () != typeof (TSerialiser))
                {
                    throw new Exception (
                        String.Format (
                            "This type seraliser database already " +
                            "has a seraliaser:{0} for target type:{1}, " +
                            "which is different to the serialiser you are registering of type {2}.",
                            existingSerialiser.GetType (),
                            typeof (TTarget),
                            typeof (TSerialiser)
                            ));
                }
                else
                {
                    return;
                }                
            }

            var ats = Activator.CreateInstance (typeof (TSerialiser)) as Serialiser;
            ats.Initialise (this);
            assetSerialisers [typeof (TTarget)] = ats;
        }

        public Serialiser<TTarget> GetSerialiser<TTarget>()
        {
            return GetSerialiser(typeof (TTarget))
                as Serialiser<TTarget>;
        }

        public Serialiser GetSerialiser(Type type)
        {
            if (!assetSerialisers.ContainsKey (type))
                throw new Exception (
                    String.Format (
                        "A type serialiser for type:{0} has " +
                        "not been regisitered",
                        type));

            return assetSerialisers [type];
        }
    }

