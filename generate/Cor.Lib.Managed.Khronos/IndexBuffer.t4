    public sealed class IndexBuffer
        : IIndexBuffer
        , IDisposable
    {
        static Int32 resourceCounter;

        Int32 indexCount;
        BufferTarget type;
        UInt32 bufferHandle;
        BufferUsageHint bufferUsage;

        public IndexBuffer (Int32 indexCount)
        {
            this.indexCount = indexCount;

            this.type = BufferTarget.ElementArrayBuffer;

            this.bufferUsage = BufferUsageHint.DynamicDraw;

            GL.GenBuffers(1, out this.bufferHandle);

            ErrorHandler.Check();

            if( this.bufferHandle == 0 )
            {
                throw new Exception("Failed to generate vert buffer.");
            }

            this.Activate();

            GL.BufferData(
                this.type,
                (System.IntPtr) (sizeof(UInt16) * this.indexCount),
                (System.IntPtr) null,
                this.bufferUsage);

            ErrorHandler.Check();

            resourceCounter++;

        }

        ~IndexBuffer()
        {
            CleanUpNativeResources();
        }

        void CleanUpManagedResources()
        {

        }

        void CleanUpNativeResources()
        {
            GL.DeleteBuffers(1, ref this.bufferHandle);
            ErrorHandler.Check();

            bufferHandle = 0;

            resourceCounter--;
        }

        public void Dispose()
        {
            CleanUpManagedResources();
            CleanUpNativeResources();
            GC.SuppressFinalize(this);
        }

        void GetBufferData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount)
            where T : struct
        {
            throw new NotImplementedException();/*
            GL.BindBuffer(BufferTarget.ArrayBuffer, ibo);
            GraphicsExtensions.CheckGLError();
            var elementSizeInByte = Marshal.SizeOf(typeof(T));
            IntPtr ptr = GL.MapBuffer(BufferTarget.ArrayBuffer, BufferAccess.ReadOnly);
            // Pointer to the start of data to read in the index buffer
            ptr = new IntPtr(ptr.ToInt64() + offsetInBytes);
            if (data is byte[])
            {
                byte[] buffer = data as byte[];
                // If data is already a byte[] we can skip the temporary buffer
                // Copy from the index buffer to the destination array
                Marshal.Copy(ptr, buffer, 0, buffer.Length);
            }
            else
            {
                // Temporary buffer to store the copied section of data
                byte[] buffer = new byte[elementCount * elementSizeInByte];
                // Copy from the index buffer to the temporary buffer
                Marshal.Copy(ptr, buffer, 0, buffer.Length);
                // Copy from the temporary buffer to the destination array
                Buffer.BlockCopy(buffer, 0, data, startIndex * elementSizeInByte, elementCount * elementSizeInByte);
            }
            GL.UnmapBuffer(BufferTarget.ArrayBuffer);
            GraphicsExtensions.CheckGLError();
            */
        }

        internal void Activate()
        {
            GL.BindBuffer(this.type, this.bufferHandle);
            ErrorHandler.Check();
        }

        internal void Deactivate()
        {
            GL.BindBuffer(this.type, 0);
            ErrorHandler.Check();
        }

        public int IndexCount
        {
            get
            {
                return indexCount;
            }
        }


        public void SetData (Int32[] data)
        {

            if( data.Length != indexCount )
            {
                throw new Exception("?");
            }

            UInt16[] udata = new UInt16[data.Length];

            for(Int32 i = 0; i < data.Length; ++i)
            {
                udata[i] = (UInt16) data[i];
            }

            this.Activate();

            // glBufferData FN will reserve appropriate data storage based on the value of size.  The data argument can
            // be null indicating that the reserved data store remains uninitiliazed.  If data is a valid pointer,
            // then content of data are copied to the allocated data store.  The contents of the buffer object data
            // store can be initialized or updated using the glBufferSubData FN
            GL.BufferSubData(
                this.type,
                (System.IntPtr) 0,
                (System.IntPtr) (sizeof(UInt16) * this.indexCount),
                udata);

            udata = null;

            ErrorHandler.Check();
        }

        public void GetData(Int32[] data)
        {
            throw new NotImplementedException();
        }

        public void SetData(Int32[] data, Int32 startIndex, Int32 elementCount)
        {
            throw new NotImplementedException();
        }

        public void GetData(Int32[] data, Int32 startIndex, Int32 elementCount)
        {
            throw new NotImplementedException();
        }

        public void SetRawData(Byte[] data, Int32 startIndex, Int32 elementCount)
        {
            throw new NotImplementedException();
        }

        public Byte[] GetRawData(Int32 startIndex, Int32 elementCount)
        {
            throw new NotImplementedException();
        }
    }

