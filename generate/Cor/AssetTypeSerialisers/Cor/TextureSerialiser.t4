    class TextureSerialiser
        : AssetTypeSerialiser<ITexture>
    {
        AssetTypeSerialiser<SurfaceFormat> surfaceFormatSerialiser;

        internal TextureSerialiser () {}

        protected internal override void Initialise(AssetTypeSerialiserManager manager)
        {
            surfaceFormatSerialiser = manager.GetTypeSerialiser<SurfaceFormat>();
        }

        protected internal override ITexture Read(AssetBinaryReader abr)
        {
            SurfaceFormat surfaceFormat = surfaceFormatSerialiser.Read(abr);
            Int32 width = abr.ReadInt32();
            Int32 height = abr.ReadInt32();
            Int32 mipCount = abr.ReadInt32();

            IGraphicsManager gfx = null;

            ITexture texture = gfx.CreateTexture (
                width,
                height,
                mipCount );

            for (Int32 i = 0; i < mipCount; ++i)
            {
                Int32 byteCount = abr.ReadInt32();
                Byte[] rawData = abr.ReadBytes (byteCount);

                texture.SetRawData (i, rawData);
            }

            return buffer;
        }

        protected internal override void Write(AssetBinaryWriter abw, ITexture obj)
        {
            surfaceFormatSerialiser.Write (abw, obj.SurfaceFormat);
            abw.Write (obj.Width);
            abw.Write (obj.Height);
            abw.Write (obj.MipCount);

            for (Int32 i = 0; i < obj.MipCount; ++i)
            {
                Byte[] rawData = obj.GetRawData (i);
                abw.Write (rawData.Length);
                abw.Write (rawData);
            }
        }
    }

