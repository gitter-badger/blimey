    [MonoTouch.Foundation.Register ("OpenGLViewController")]
    public partial class OpenGLViewController 
        : MonoTouch.UIKit.UIViewController
    {
        AppSettings _settings;
        IApp _game;
            
        public OpenGLViewController (
            AppSettings settings,
            IApp game)
            : base ()
        {
            MonoTouch.UIKit.UIApplication.SharedApplication.SetStatusBarHidden (true, MonoTouch.UIKit.UIStatusBarAnimation.None);
            _settings = settings;
            _game = game;
        }
        
        new EAGLView View
        {
            get
            {
                return (EAGLView) base.View;
            }
        }
        /*
        // stuff to expose specifically to the monotouch implementation
        public override MonoTouch.UIKit.UIInterfaceOrientationMask GetSupportedInterfaceOrientations ()
        {
            return new MonoTouch.UIKit.UIInterfaceOrientationMask();
        }

        public override MonoTouch.UIKit.UIInterfaceOrientation PreferredInterfaceOrientationForPresentation ()
        {
            return base.PreferredInterfaceOrientationForPresentation ();
        }


        public override bool ShouldAutorotate ()
        {
            return base.ShouldAutorotate ();
        }
        */

        public override void LoadView()
        {
            //var size = MonoTouch.UIKit.UIScreen.MainScreen.CurrentMode.Size;
            //var frame = new System.Drawing.RectangleF(0, 0, size.Width, size.Height);
            var frame = MonoTouch.UIKit.UIScreen.MainScreen.Bounds;
            base.View = new EAGLView(frame);
        }
        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            MonoTouch.Foundation.NSNotificationCenter.DefaultCenter.AddObserver (
                MonoTouch.UIKit.UIApplication.WillResignActiveNotification, a => {
                if (IsViewLoaded && View.Window != null)
                    View.StopAnimating ();
                },
                this
            );

            MonoTouch.Foundation.NSNotificationCenter.DefaultCenter.AddObserver (
                MonoTouch.UIKit.UIApplication.DidBecomeActiveNotification, a => {
                if (IsViewLoaded && View.Window != null)
                    View.StartAnimating ();
                },
                this
            );

            MonoTouch.Foundation.NSNotificationCenter.DefaultCenter.AddObserver (
                MonoTouch.UIKit.UIApplication.WillTerminateNotification, a => {
                if (IsViewLoaded && View.Window != null)
                    View.StopAnimating ();
                },
                this
            );
            
            View.SetEngineDetails(_settings, _game);
        }
        
        protected override void Dispose (System.Boolean disposing)
        {
            base.Dispose (disposing);
            
            MonoTouch.Foundation.NSNotificationCenter.DefaultCenter.RemoveObserver (this);
        }
        
        public override void DidReceiveMemoryWarning ()
        {
            // Releases the view if it doesn't have a superview.
            base.DidReceiveMemoryWarning ();
            
            // Release any cached data, images, etc that aren't in use.
        }

        public override void DidRotate(MonoTouch.UIKit.UIInterfaceOrientation fromInterfaceOrientation)
        {
            base.DidRotate(fromInterfaceOrientation);

            //String previous = fromInterfaceOrientation


        }

        
        public override void ViewWillAppear (System.Boolean animated)
        {
            base.ViewWillAppear (animated);
            View.StartAnimating ();
        }
        
        public override void ViewWillDisappear (System.Boolean animated)
        {
            base.ViewWillDisappear (animated);
            View.StopAnimating ();
        }
    }

