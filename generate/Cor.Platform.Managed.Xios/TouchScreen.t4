    public sealed class TouchScreen
        : IMultiTouchController
        , IPanelSpecification
        , IScreenSpecification
    {
        readonly Dictionary<Int32, iOSTouchState> touchData;
        readonly MonoTouch.UIKit.UIView view;
        readonly TouchCollection collection = new TouchCollection();
        readonly ICor engine;

        internal TouchScreen(
            ICor engine,
            MonoTouch.UIKit.UIView view,
            Dictionary<Int32, iOSTouchState> touches)
        {
            this.view = view;
            this.engine = engine;
            this.touchData = touches;

            Console.WriteLine(string.Format("Screen Specification - Width: {0}, Height: {1}", ScreenResolutionWidth, ScreenResolutionHeight));
        }

        public IPanelSpecification PanelSpecification
        {
            get
            {
                return this;
            }
        }

        internal void Update(AppTime time)
        {
            //Console.WriteLine(string.Format("MonoTouch.UIKit.UIScreen.MainScreen.Bounds - h: {0}, w: {1}", ScreenResolutionWidth, ScreenResolutionHeight));

            // seems to be a problem with mono touch reporting a new touch with
            // the same id across multiple frames.
            List<Int32> touchIDsLastFrame = new List<int>();

            foreach(var touch in this.collection)
            {
                touchIDsLastFrame.Add(touch.ID);
            }

            this.collection.ClearBuffer();


            foreach (var key in touchData.Keys)
            {
                var uiKitTouch = touchData[key];
                System.Drawing.PointF location = uiKitTouch.Location;

                Int32 id = uiKitTouch.Handle;

                Vector2 pos = new Vector2(location.X, location.Y);

                //Console.WriteLine(string.Format("UIKitTouch - id: {0}, pos: {1}", id, pos));

                // todo: this needs to be current display res, not just the screen specs


                pos.X = pos.X / engine.System.CurrentDisplaySize.X;
                pos.Y = pos.Y / engine.System.CurrentDisplaySize.Y;

                pos -= new Vector2(0.5f, 0.5f);

                pos.Y = -pos.Y;

                var state = EnumConverter.ToCorPrimitiveType(uiKitTouch.Phase);

                if( touchIDsLastFrame.Contains(id) )
                {
                    if( state == TouchPhase.JustPressed )
                    {
                        //Sungiant.Core.Teletype.WriteLine("ignoring " + id);

                        state = TouchPhase.Active;
                    }
                }

                if( state == TouchPhase.JustPressed )
                {
                    Console.WriteLine(string.Format("Touch - id: {0}, pos: {1}", id, pos));
                }

                this.collection.RegisterTouch(id, pos, state, time.FrameNumber, time.Elapsed);
            }
        }



        public Vector2 PanelPhysicalSize
        {
            get
            {
                // do lookup here into all device types
                //MonoTouch.ObjCRuntime.
                return new Vector2(0.0768f, 0.1024f);
            }
        }

        public float PanelPhysicalAspectRatio
        {
            get
            {
                return PanelPhysicalSize.X / PanelPhysicalSize.Y;
            }
        }
        public PanelType PanelType
        {
            get
            {
                return PanelType.TouchScreen;
            }
        }


        public float ScreenResolutionAspectRatio
        { 
            get 
            {
                return this.ScreenResolutionWidth / this.ScreenResolutionHeight;
            } 
        }

        // need to think about
        public Single PixelDensity
        {
            get
            {
                return 1f;
            }
            set
            {
                ;
            }
        }

        public Int32 ScreenResolutionHeight
        {
            get
            {
                return (Int32) (
                    MonoTouch.UIKit.UIScreen.MainScreen.Bounds.Height *
                    MonoTouch.UIKit.UIScreen.MainScreen.Scale);
            }
        }

        public Int32 ScreenResolutionWidth
        {
            get
            {
                return (Int32) (
                    MonoTouch.UIKit.UIScreen.MainScreen.Bounds.Width *
                    MonoTouch.UIKit.UIScreen.MainScreen.Scale);
            }
        }

        public TouchCollection TouchCollection 
        { 
            get { return this.collection; } 
        }
    }

