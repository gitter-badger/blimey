    public sealed class LogManager
    {
        public delegate void WriteLogDelegate (
            String assembly,
            String tag,
            String channel,
            String type,
            String time,
            String[] lines);

        public void Debug(String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Debug, assembly, line);
        }

        public void Debug(String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Debug, assembly, line, args);
        }

        public void Debug(String channel, String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Debug, assembly, channel, line, args);
        }

        public void Debug(String channel, String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Debug, assembly, channel, line);
        }

        public void Info(String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Info, assembly, line);
        }

        public void Info(String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Info, assembly, line, args);
        }

        public void Info(String channel, String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Info, assembly, channel, line, args);
        }

        public void Info(String channel, String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Info, assembly, channel, line);
        }

        public void Warning(String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Warning, assembly, line);
        }

        public void Warning(String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Warning, assembly, line, args);
        }

        public void Warning(String channel, String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Warning, assembly, channel, line, args);
        }

        public void Warning(String channel, String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Warning, assembly, channel, line);
        }

        public void Error(String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Error, assembly, line);
        }

        public void Error(String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Error, assembly, line, args);
        }

        public void Error(String channel, String line, params Object[] args)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Error, assembly, channel, line, args);
        }

        public void Error(String channel, String line)
        {
            Assembly assembly = Assembly.GetCallingAssembly();
            WriteLine(LogType.Error, assembly, channel, line);
        }


        enum LogType
        {
            Debug,
            Info,
            Warning,
            Error,
        }

        readonly LogManagerSettings settings;

        internal LogManager(LogManagerSettings settings)
        {
            this.settings = settings;
        }

        // This should be user customisable
        void DoWriteLog(
            String assembly,
            String tag,
            String channel,
            String type,
            String time,
            String[] lines)
        {
            foreach(var writeLogFn in settings.LogWriters)
            {
                writeLogFn(assembly, tag, channel, type, time, lines);
            }
        }

        void WriteLine(LogType type, Assembly callingAssembly, String line)
        {
            WriteLine(type, callingAssembly, "Default", line);
        }


        void WriteLine(LogType type, Assembly callingAssembly, String line, params object[] args)
        {
            WriteLine(type, callingAssembly, "Default", line, args);
        }

        void WriteLine(LogType type, Assembly callingAssembly, String channel, String line, params object[] args)
        {
            String main = String.Format(line, args);

            WriteLine(type, callingAssembly, channel, main);
        }

        void WriteLine(LogType type, Assembly callingAssembly, String channel, String line)
        {
            if (settings.UseLogChannels &&
                !settings.EnabledLogChannels.Contains(channel))
            {
                return;
            }

            if (String.IsNullOrWhiteSpace (line))
            {
                return;
            }

            String assembyStr = Path.GetFileNameWithoutExtension (callingAssembly.Location);
            String typeStr = type.ToString().ToUpper();
            String timeStr = DateTime.Now.ToString("HH:mm:ss.ffffff");
            String[] lines = line.Split(Environment.NewLine.ToCharArray())
                .Where (x => !String.IsNullOrWhiteSpace(x))
                .ToArray();

            DoWriteLog(assembyStr, settings.Tag, channel, typeStr, timeStr, lines);
        }
    }

