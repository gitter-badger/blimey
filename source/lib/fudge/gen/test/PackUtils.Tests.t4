    /// <summary>
    /// todo
    /// </summary>
    [TestFixture]
    public class PackUtils
    {
        /*
        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestPacking_Signed_i ()
        {
            var rand = new System.Random();

            UInt32 bitmask = 0xffffffff;

            for(Int32 i = 0; i < Settings.NumTests; ++i)
            {
                Single s = (Single)rand.NextDouble();

                UInt32 p = global::Fudge.PackUtils.PackSigned (bitmask, s);

                Single u = global::Fudge.PackUtils.UnpackSigned (bitmask, p);

                Assert.That (u, Is.EqualTo(s));
            }
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestPacking_Signed_ii ()
        {
            var rand = new System.Random();
            var buff = new Byte[4];
            UInt32 bitmask = 0xffffffff;

            for(Int32 i = 0; i < Settings.NumTests; ++i)
            {
                rand.NextBytes(buff);
                UInt32 p = BitConverter.ToUInt32(buff, 0);

                Single u = global::Fudge.PackUtils.UnpackSigned (bitmask, p);

                UInt32 rp = global::Fudge.PackUtils.PackSigned (bitmask, u);

                Assert.That (rp, Is.EqualTo(p));
            }
        }*/

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestPacking_SignedNormalised_i ()
        {
            var rand = new System.Random();

            UInt32 bitmask = 0xffffffff;

            for(Int32 i = 0; i < Settings.NumTests; ++i)
            {
                Single s = (Single)rand.NextDouble();

                if (rand.Next(0, 1) == 1) s = -s;

                UInt32 p = global::Fudge.PackUtils.PackSignedNormalised (bitmask, s);

                Single u = global::Fudge.PackUtils.UnpackSignedNormalised (bitmask, p);

                Assert.That (u, Is.EqualTo(s));
            }
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestPacking_UnsignedNormalisedValue_i ()
        {
            var rand = new System.Random();

            UInt32 bitmask = 0xffffffff;

            for(Int32 i = 0; i < Settings.NumTests; ++i)
            {
                Single s = (Single)rand.NextDouble();

                UInt32 p = global::Fudge.PackUtils.PackUnsignedNormalisedValue (bitmask, s);

                Single u = global::Fudge.PackUtils.UnpackUnsignedNormalisedValue (bitmask, p);

                Assert.That (u, Is.EqualTo(s));
            }
        }
    }

